import { __decorate } from "tslib";
/*
 Copyright 2013-2020 the original author or authors from the JHipster project.

 This file is part of the JHipster project, see https://www.jhipster.tech/
 for more information.

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

 http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
 */
import { Component, Input } from '@angular/core';
import { JhiConfigService } from '../config.service';
/**
 * This component can be used to display a boolean value by defining the @Input attributes
 * If an attribute is not provided, default values will be applied (see JhiModuleConfig class)
 * Have a look at the following examples
 *
 * * * * * * * * * * * * * * * * * * * * * * * * * * * *
 *
 * <jhi-boolean [value]="inputBooleanVariable"></jhi-boolean>
 *
 * - Display a green check when inputBooleanVariable is true
 * - Display a red cross when inputBooleanVariable is false
 *
 * * * * * * * * * * * * * * * * * * * * * * * * * * * *
 *
 * <jhi-boolean
 *     [value]="inputBooleanVariable">
 *     classTrue="fa fa-lg fa-check text-primary"
 *     classFalse="fa fa-lg fa-times text-warning"
 * </jhi-boolean>
 *
 * - Display a blue check when inputBooleanVariable is true
 * - Display an orange cross when inputBooleanVariable is false
 *
 * * * * * * * * * * * * * * * * * * * * * * * * * * * *
 *
 * <jhi-boolean
 *     [value]="inputBooleanVariable">
 *     classTrue="fa fa-lg fa-check"
 *     classFalse=""
 * </jhi-boolean>
 *
 * - Display a black check when inputBooleanVariable is true
 * - Do not display anything when inputBooleanVariable is false
 *
 * * * * * * * * * * * * * * * * * * * * * * * * * * * *
 *
 * <jhi-boolean
 *     [value]="inputBooleanVariable"
 *     [textTrue]="'userManagement.activated' | translate"
 *     textFalse="deactivated">
 * </jhi-boolean>
 *
 * - Display a green badge when inputBooleanVariable is true
 * - Display a red badge when inputBooleanVariable is false
 *
 * * * * * * * * * * * * * * * * * * * * * * * * * * * *
 *
 * <jhi-boolean
 *     [value]="user.activated"
 *     classTrue="badge badge-warning"
 *     classFalse="badge badge-info"
 *     [textTrue]="'userManagement.activated' | translate"
 *     textFalse="deactivated">
 * </jhi-boolean>
 *
 * - Display an orange badge and write 'activated' when inputBooleanVariable is true
 * - Display a blue badge and write 'deactivated' when inputBooleanVariable is false
 */
var JhiBooleanComponent = /** @class */ (function () {
    function JhiBooleanComponent(configService) {
        this.config = configService.getConfig();
    }
    JhiBooleanComponent.prototype.ngOnInit = function () {
        if (this.textTrue === undefined) {
            if (this.classTrue === undefined) {
                this.classTrue = this.config.classTrue;
            }
        }
        else {
            if (this.classTrue === undefined) {
                this.classTrue = this.config.classBadgeTrue;
            }
        }
        if (this.textFalse === undefined) {
            if (this.classFalse === undefined) {
                this.classFalse = this.config.classFalse;
            }
        }
        else {
            if (this.classFalse === undefined) {
                this.classFalse = this.config.classBadgeFalse;
            }
        }
    };
    JhiBooleanComponent.ctorParameters = function () { return [
        { type: JhiConfigService }
    ]; };
    __decorate([
        Input()
    ], JhiBooleanComponent.prototype, "value", void 0);
    __decorate([
        Input()
    ], JhiBooleanComponent.prototype, "classTrue", void 0);
    __decorate([
        Input()
    ], JhiBooleanComponent.prototype, "classFalse", void 0);
    __decorate([
        Input()
    ], JhiBooleanComponent.prototype, "textTrue", void 0);
    __decorate([
        Input()
    ], JhiBooleanComponent.prototype, "textFalse", void 0);
    JhiBooleanComponent = __decorate([
        Component({
            selector: 'jhi-boolean',
            template: "\n        <span [ngClass]=\"value ? classTrue : classFalse\" [innerHtml]=\"value ? textTrue : textFalse\"> </span>\n    "
        })
    ], JhiBooleanComponent);
    return JhiBooleanComponent;
}());
export { JhiBooleanComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiamhpLWJvb2xlYW4uY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vbmctamhpcHN0ZXIvIiwic291cmNlcyI6WyJjb21wb25lbnQvamhpLWJvb2xlYW4uY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQTs7Ozs7Ozs7Ozs7Ozs7Ozs7R0FpQkc7QUFDSCxPQUFPLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBVSxNQUFNLGVBQWUsQ0FBQztBQUV6RCxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQztBQUVyRDs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0dBeURHO0FBT0g7SUE0QkksNkJBQVksYUFBK0I7UUFDdkMsSUFBSSxDQUFDLE1BQU0sR0FBRyxhQUFhLENBQUMsU0FBUyxFQUFFLENBQUM7SUFDNUMsQ0FBQztJQUVELHNDQUFRLEdBQVI7UUFDSSxJQUFJLElBQUksQ0FBQyxRQUFRLEtBQUssU0FBUyxFQUFFO1lBQzdCLElBQUksSUFBSSxDQUFDLFNBQVMsS0FBSyxTQUFTLEVBQUU7Z0JBQzlCLElBQUksQ0FBQyxTQUFTLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUM7YUFDMUM7U0FDSjthQUFNO1lBQ0gsSUFBSSxJQUFJLENBQUMsU0FBUyxLQUFLLFNBQVMsRUFBRTtnQkFDOUIsSUFBSSxDQUFDLFNBQVMsR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLGNBQWMsQ0FBQzthQUMvQztTQUNKO1FBRUQsSUFBSSxJQUFJLENBQUMsU0FBUyxLQUFLLFNBQVMsRUFBRTtZQUM5QixJQUFJLElBQUksQ0FBQyxVQUFVLEtBQUssU0FBUyxFQUFFO2dCQUMvQixJQUFJLENBQUMsVUFBVSxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsVUFBVSxDQUFDO2FBQzVDO1NBQ0o7YUFBTTtZQUNILElBQUksSUFBSSxDQUFDLFVBQVUsS0FBSyxTQUFTLEVBQUU7Z0JBQy9CLElBQUksQ0FBQyxVQUFVLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxlQUFlLENBQUM7YUFDakQ7U0FDSjtJQUNMLENBQUM7O2dCQXhCMEIsZ0JBQWdCOztJQXhCbEM7UUFBUixLQUFLLEVBQUU7c0RBQWdCO0lBS2Y7UUFBUixLQUFLLEVBQUU7MERBQW1CO0lBS2xCO1FBQVIsS0FBSyxFQUFFOzJEQUFvQjtJQUtuQjtRQUFSLEtBQUssRUFBRTt5REFBa0I7SUFLakI7UUFBUixLQUFLLEVBQUU7MERBQW1CO0lBeEJsQixtQkFBbUI7UUFOL0IsU0FBUyxDQUFDO1lBQ1AsUUFBUSxFQUFFLGFBQWE7WUFDdkIsUUFBUSxFQUFFLDBIQUVUO1NBQ0osQ0FBQztPQUNXLG1CQUFtQixDQXFEL0I7SUFBRCwwQkFBQztDQUFBLEFBckRELElBcURDO1NBckRZLG1CQUFtQiIsInNvdXJjZXNDb250ZW50IjpbIi8qXG4gQ29weXJpZ2h0IDIwMTMtMjAyMCB0aGUgb3JpZ2luYWwgYXV0aG9yIG9yIGF1dGhvcnMgZnJvbSB0aGUgSkhpcHN0ZXIgcHJvamVjdC5cblxuIFRoaXMgZmlsZSBpcyBwYXJ0IG9mIHRoZSBKSGlwc3RlciBwcm9qZWN0LCBzZWUgaHR0cHM6Ly93d3cuamhpcHN0ZXIudGVjaC9cbiBmb3IgbW9yZSBpbmZvcm1hdGlvbi5cblxuIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4geW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuXG4gaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG5cbiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuaW1wb3J0IHsgQ29tcG9uZW50LCBJbnB1dCwgT25Jbml0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBKaGlNb2R1bGVDb25maWcgfSBmcm9tICcuLi9jb25maWcnO1xuaW1wb3J0IHsgSmhpQ29uZmlnU2VydmljZSB9IGZyb20gJy4uL2NvbmZpZy5zZXJ2aWNlJztcblxuLyoqXG4gKiBUaGlzIGNvbXBvbmVudCBjYW4gYmUgdXNlZCB0byBkaXNwbGF5IGEgYm9vbGVhbiB2YWx1ZSBieSBkZWZpbmluZyB0aGUgQElucHV0IGF0dHJpYnV0ZXNcbiAqIElmIGFuIGF0dHJpYnV0ZSBpcyBub3QgcHJvdmlkZWQsIGRlZmF1bHQgdmFsdWVzIHdpbGwgYmUgYXBwbGllZCAoc2VlIEpoaU1vZHVsZUNvbmZpZyBjbGFzcylcbiAqIEhhdmUgYSBsb29rIGF0IHRoZSBmb2xsb3dpbmcgZXhhbXBsZXNcbiAqXG4gKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKlxuICpcbiAqIDxqaGktYm9vbGVhbiBbdmFsdWVdPVwiaW5wdXRCb29sZWFuVmFyaWFibGVcIj48L2poaS1ib29sZWFuPlxuICpcbiAqIC0gRGlzcGxheSBhIGdyZWVuIGNoZWNrIHdoZW4gaW5wdXRCb29sZWFuVmFyaWFibGUgaXMgdHJ1ZVxuICogLSBEaXNwbGF5IGEgcmVkIGNyb3NzIHdoZW4gaW5wdXRCb29sZWFuVmFyaWFibGUgaXMgZmFsc2VcbiAqXG4gKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKlxuICpcbiAqIDxqaGktYm9vbGVhblxuICogICAgIFt2YWx1ZV09XCJpbnB1dEJvb2xlYW5WYXJpYWJsZVwiPlxuICogICAgIGNsYXNzVHJ1ZT1cImZhIGZhLWxnIGZhLWNoZWNrIHRleHQtcHJpbWFyeVwiXG4gKiAgICAgY2xhc3NGYWxzZT1cImZhIGZhLWxnIGZhLXRpbWVzIHRleHQtd2FybmluZ1wiXG4gKiA8L2poaS1ib29sZWFuPlxuICpcbiAqIC0gRGlzcGxheSBhIGJsdWUgY2hlY2sgd2hlbiBpbnB1dEJvb2xlYW5WYXJpYWJsZSBpcyB0cnVlXG4gKiAtIERpc3BsYXkgYW4gb3JhbmdlIGNyb3NzIHdoZW4gaW5wdXRCb29sZWFuVmFyaWFibGUgaXMgZmFsc2VcbiAqXG4gKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKlxuICpcbiAqIDxqaGktYm9vbGVhblxuICogICAgIFt2YWx1ZV09XCJpbnB1dEJvb2xlYW5WYXJpYWJsZVwiPlxuICogICAgIGNsYXNzVHJ1ZT1cImZhIGZhLWxnIGZhLWNoZWNrXCJcbiAqICAgICBjbGFzc0ZhbHNlPVwiXCJcbiAqIDwvamhpLWJvb2xlYW4+XG4gKlxuICogLSBEaXNwbGF5IGEgYmxhY2sgY2hlY2sgd2hlbiBpbnB1dEJvb2xlYW5WYXJpYWJsZSBpcyB0cnVlXG4gKiAtIERvIG5vdCBkaXNwbGF5IGFueXRoaW5nIHdoZW4gaW5wdXRCb29sZWFuVmFyaWFibGUgaXMgZmFsc2VcbiAqXG4gKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKlxuICpcbiAqIDxqaGktYm9vbGVhblxuICogICAgIFt2YWx1ZV09XCJpbnB1dEJvb2xlYW5WYXJpYWJsZVwiXG4gKiAgICAgW3RleHRUcnVlXT1cIid1c2VyTWFuYWdlbWVudC5hY3RpdmF0ZWQnIHwgdHJhbnNsYXRlXCJcbiAqICAgICB0ZXh0RmFsc2U9XCJkZWFjdGl2YXRlZFwiPlxuICogPC9qaGktYm9vbGVhbj5cbiAqXG4gKiAtIERpc3BsYXkgYSBncmVlbiBiYWRnZSB3aGVuIGlucHV0Qm9vbGVhblZhcmlhYmxlIGlzIHRydWVcbiAqIC0gRGlzcGxheSBhIHJlZCBiYWRnZSB3aGVuIGlucHV0Qm9vbGVhblZhcmlhYmxlIGlzIGZhbHNlXG4gKlxuICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICpcbiAqXG4gKiA8amhpLWJvb2xlYW5cbiAqICAgICBbdmFsdWVdPVwidXNlci5hY3RpdmF0ZWRcIlxuICogICAgIGNsYXNzVHJ1ZT1cImJhZGdlIGJhZGdlLXdhcm5pbmdcIlxuICogICAgIGNsYXNzRmFsc2U9XCJiYWRnZSBiYWRnZS1pbmZvXCJcbiAqICAgICBbdGV4dFRydWVdPVwiJ3VzZXJNYW5hZ2VtZW50LmFjdGl2YXRlZCcgfCB0cmFuc2xhdGVcIlxuICogICAgIHRleHRGYWxzZT1cImRlYWN0aXZhdGVkXCI+XG4gKiA8L2poaS1ib29sZWFuPlxuICpcbiAqIC0gRGlzcGxheSBhbiBvcmFuZ2UgYmFkZ2UgYW5kIHdyaXRlICdhY3RpdmF0ZWQnIHdoZW4gaW5wdXRCb29sZWFuVmFyaWFibGUgaXMgdHJ1ZVxuICogLSBEaXNwbGF5IGEgYmx1ZSBiYWRnZSBhbmQgd3JpdGUgJ2RlYWN0aXZhdGVkJyB3aGVuIGlucHV0Qm9vbGVhblZhcmlhYmxlIGlzIGZhbHNlXG4gKi9cbkBDb21wb25lbnQoe1xuICAgIHNlbGVjdG9yOiAnamhpLWJvb2xlYW4nLFxuICAgIHRlbXBsYXRlOiBgXG4gICAgICAgIDxzcGFuIFtuZ0NsYXNzXT1cInZhbHVlID8gY2xhc3NUcnVlIDogY2xhc3NGYWxzZVwiIFtpbm5lckh0bWxdPVwidmFsdWUgPyB0ZXh0VHJ1ZSA6IHRleHRGYWxzZVwiPiA8L3NwYW4+XG4gICAgYFxufSlcbmV4cG9ydCBjbGFzcyBKaGlCb29sZWFuQ29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0IHtcbiAgICAvKipcbiAgICAgKiB0aGUgYm9vbGVhbiBpbnB1dCB2YWx1ZVxuICAgICAqL1xuICAgIEBJbnB1dCgpIHZhbHVlOiBib29sZWFuO1xuXG4gICAgLyoqXG4gICAgICogdGhlIGNsYXNzKGVzKSAoc3BhY2Ugc2VwYXJhdGVkKSB0aGF0IHdpbGwgYmUgYXBwbGllZCBpZiB2YWx1ZSBpcyB0cnVlXG4gICAgICovXG4gICAgQElucHV0KCkgY2xhc3NUcnVlOiBzdHJpbmc7XG5cbiAgICAvKipcbiAgICAgKiB0aGUgY2xhc3MoZXMpIChzcGFjZSBzZXBhcmF0ZWQpIHRoYXQgd2lsbCBiZSBhcHBsaWVkIGlmIHRoZSBpbnB1dCB2YWx1ZSBpcyBmYWxzZVxuICAgICAqL1xuICAgIEBJbnB1dCgpIGNsYXNzRmFsc2U6IHN0cmluZztcblxuICAgIC8qKlxuICAgICAqIHRoZSB0ZXh0IHRoYXQgd2lsbCBiZSBkaXNwbGF5ZWQgaWYgdGhlIGlucHV0IHZhbHVlIGlzIHRydWVcbiAgICAgKi9cbiAgICBASW5wdXQoKSB0ZXh0VHJ1ZTogc3RyaW5nO1xuXG4gICAgLyoqXG4gICAgICogdGhlIHRleHQgdGhhdCB3aWxsIGJlIGRpc3BsYXllZCBpZiB0aGUgaW5wdXQgdmFsdWUgaXMgZmFsc2VcbiAgICAgKi9cbiAgICBASW5wdXQoKSB0ZXh0RmFsc2U6IHN0cmluZztcblxuICAgIGNvbmZpZzogSmhpTW9kdWxlQ29uZmlnO1xuXG4gICAgY29uc3RydWN0b3IoY29uZmlnU2VydmljZTogSmhpQ29uZmlnU2VydmljZSkge1xuICAgICAgICB0aGlzLmNvbmZpZyA9IGNvbmZpZ1NlcnZpY2UuZ2V0Q29uZmlnKCk7XG4gICAgfVxuXG4gICAgbmdPbkluaXQoKSB7XG4gICAgICAgIGlmICh0aGlzLnRleHRUcnVlID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLmNsYXNzVHJ1ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5jbGFzc1RydWUgPSB0aGlzLmNvbmZpZy5jbGFzc1RydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpZiAodGhpcy5jbGFzc1RydWUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIHRoaXMuY2xhc3NUcnVlID0gdGhpcy5jb25maWcuY2xhc3NCYWRnZVRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGhpcy50ZXh0RmFsc2UgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgaWYgKHRoaXMuY2xhc3NGYWxzZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5jbGFzc0ZhbHNlID0gdGhpcy5jb25maWcuY2xhc3NGYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlmICh0aGlzLmNsYXNzRmFsc2UgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIHRoaXMuY2xhc3NGYWxzZSA9IHRoaXMuY29uZmlnLmNsYXNzQmFkZ2VGYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbn1cbiJdfQ==