import { __decorate, __values } from "tslib";
/*
 Copyright 2013-2020 the original author or authors from the JHipster project.

 This file is part of the JHipster project, see https://www.jhipster.tech/
 for more information.

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

 http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
 */
import { Pipe } from '@angular/core';
var JhiFilterPipe = /** @class */ (function () {
    function JhiFilterPipe() {
    }
    JhiFilterPipe.prototype.transform = function (input, filter, field) {
        if (typeof filter === 'undefined' || filter === '') {
            return input;
        }
        // if filter is of type 'function' compute current value of filter, otherwise return filter
        var currentFilter = typeof filter === 'function' ? filter() : filter;
        if (typeof currentFilter === 'number') {
            return input.filter(this.filterByNumber(currentFilter, field));
        }
        if (typeof currentFilter === 'boolean') {
            return input.filter(this.filterByBoolean(currentFilter, field));
        }
        if (typeof currentFilter === 'string') {
            return input.filter(this.filterByString(currentFilter, field));
        }
        if (typeof currentFilter === 'object') {
            // filter by object ignores 'field' if specified
            return input.filter(this.filterByObject(currentFilter));
        }
        // 'symbol' && 'undefined'
        return input.filter(this.filterDefault(currentFilter, field));
    };
    JhiFilterPipe.prototype.filterByNumber = function (filter, field) {
        return function (value) {
            return (value && !filter) || (typeof value === 'object' && field)
                ? value[field] && typeof value[field] === 'number' && value[field] === filter
                : typeof value === 'number' && value === filter;
        };
    };
    JhiFilterPipe.prototype.filterByBoolean = function (filter, field) {
        return function (value) {
            return typeof value === 'object' && field
                ? value[field] && typeof value[field] === 'boolean' && value[field] === filter
                : typeof value === 'boolean' && value === filter;
        };
    };
    JhiFilterPipe.prototype.filterByString = function (filter, field) {
        return function (value) {
            return (value && !filter) || (typeof value === 'object' && field)
                ? value[field] && typeof value[field] === 'string' && value[field].toLowerCase().includes(filter.toLowerCase())
                : typeof value === 'string' && value.toLowerCase().includes(filter.toLowerCase());
        };
    };
    JhiFilterPipe.prototype.filterDefault = function (filter, field) {
        return function (value) { return ((value && !filter) || (typeof value === 'object' && field) ? value[field] && filter === value : filter === value); };
    };
    JhiFilterPipe.prototype.filterByObject = function (filter) {
        var _this = this;
        return function (value) {
            var e_1, _a;
            var keys = Object.keys(filter);
            var isMatching = false;
            try {
                // all fields defined in filter object must match
                for (var keys_1 = __values(keys), keys_1_1 = keys_1.next(); !keys_1_1.done; keys_1_1 = keys_1.next()) {
                    var key = keys_1_1.value;
                    if (typeof filter[key] === 'number') {
                        isMatching = _this.filterByNumber(filter[key])(value[key]);
                    }
                    else if (typeof filter[key] === 'boolean') {
                        isMatching = _this.filterByBoolean(filter[key])(value[key]);
                    }
                    else if (typeof filter[key] === 'string') {
                        isMatching = _this.filterByString(filter[key])(value[key]);
                    }
                    else {
                        isMatching = _this.filterDefault(filter[key])(value[key]);
                    }
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (keys_1_1 && !keys_1_1.done && (_a = keys_1.return)) _a.call(keys_1);
                }
                finally { if (e_1) throw e_1.error; }
            }
            return isMatching;
        };
    };
    JhiFilterPipe = __decorate([
        Pipe({ name: 'filter', pure: false })
    ], JhiFilterPipe);
    return JhiFilterPipe;
}());
export { JhiFilterPipe };
//# sourceMappingURL=data:application/json;base64,