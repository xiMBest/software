import { OnInit } from '@angular/core';
import { JhiModuleConfig } from '../config';
import { JhiConfigService } from '../config.service';
/**
 * This component can be used to display a boolean value by defining the @Input attributes
 * If an attribute is not provided, default values will be applied (see JhiModuleConfig class)
 * Have a look at the following examples
 *
 * * * * * * * * * * * * * * * * * * * * * * * * * * * *
 *
 * <jhi-boolean [value]="inputBooleanVariable"></jhi-boolean>
 *
 * - Display a green check when inputBooleanVariable is true
 * - Display a red cross when inputBooleanVariable is false
 *
 * * * * * * * * * * * * * * * * * * * * * * * * * * * *
 *
 * <jhi-boolean
 *     [value]="inputBooleanVariable">
 *     classTrue="fa fa-lg fa-check text-primary"
 *     classFalse="fa fa-lg fa-times text-warning"
 * </jhi-boolean>
 *
 * - Display a blue check when inputBooleanVariable is true
 * - Display an orange cross when inputBooleanVariable is false
 *
 * * * * * * * * * * * * * * * * * * * * * * * * * * * *
 *
 * <jhi-boolean
 *     [value]="inputBooleanVariable">
 *     classTrue="fa fa-lg fa-check"
 *     classFalse=""
 * </jhi-boolean>
 *
 * - Display a black check when inputBooleanVariable is true
 * - Do not display anything when inputBooleanVariable is false
 *
 * * * * * * * * * * * * * * * * * * * * * * * * * * * *
 *
 * <jhi-boolean
 *     [value]="inputBooleanVariable"
 *     [textTrue]="'userManagement.activated' | translate"
 *     textFalse="deactivated">
 * </jhi-boolean>
 *
 * - Display a green badge when inputBooleanVariable is true
 * - Display a red badge when inputBooleanVariable is false
 *
 * * * * * * * * * * * * * * * * * * * * * * * * * * * *
 *
 * <jhi-boolean
 *     [value]="user.activated"
 *     classTrue="badge badge-warning"
 *     classFalse="badge badge-info"
 *     [textTrue]="'userManagement.activated' | translate"
 *     textFalse="deactivated">
 * </jhi-boolean>
 *
 * - Display an orange badge and write 'activated' when inputBooleanVariable is true
 * - Display a blue badge and write 'deactivated' when inputBooleanVariable is false
 */
import * as ɵngcc0 from '@angular/core';
export declare class JhiBooleanComponent implements OnInit {
    /**
     * the boolean input value
     */
    value: boolean;
    /**
     * the class(es) (space separated) that will be applied if value is true
     */
    classTrue: string;
    /**
     * the class(es) (space separated) that will be applied if the input value is false
     */
    classFalse: string;
    /**
     * the text that will be displayed if the input value is true
     */
    textTrue: string;
    /**
     * the text that will be displayed if the input value is false
     */
    textFalse: string;
    config: JhiModuleConfig;
    constructor(configService: JhiConfigService);
    ngOnInit(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<JhiBooleanComponent>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<JhiBooleanComponent, "jhi-boolean", never, {
    "classTrue": "classTrue";
    "classFalse": "classFalse";
    "value": "value";
    "textTrue": "textTrue";
    "textFalse": "textFalse";
}, {}, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiamhpLWJvb2xlYW4uY29tcG9uZW50LmQudHMiLCJzb3VyY2VzIjpbImpoaS1ib29sZWFuLmNvbXBvbmVudC5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQTZEQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUF3QkEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBPbkluaXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEpoaU1vZHVsZUNvbmZpZyB9IGZyb20gJy4uL2NvbmZpZyc7XG5pbXBvcnQgeyBKaGlDb25maWdTZXJ2aWNlIH0gZnJvbSAnLi4vY29uZmlnLnNlcnZpY2UnO1xuLyoqXG4gKiBUaGlzIGNvbXBvbmVudCBjYW4gYmUgdXNlZCB0byBkaXNwbGF5IGEgYm9vbGVhbiB2YWx1ZSBieSBkZWZpbmluZyB0aGUgQElucHV0IGF0dHJpYnV0ZXNcbiAqIElmIGFuIGF0dHJpYnV0ZSBpcyBub3QgcHJvdmlkZWQsIGRlZmF1bHQgdmFsdWVzIHdpbGwgYmUgYXBwbGllZCAoc2VlIEpoaU1vZHVsZUNvbmZpZyBjbGFzcylcbiAqIEhhdmUgYSBsb29rIGF0IHRoZSBmb2xsb3dpbmcgZXhhbXBsZXNcbiAqXG4gKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKlxuICpcbiAqIDxqaGktYm9vbGVhbiBbdmFsdWVdPVwiaW5wdXRCb29sZWFuVmFyaWFibGVcIj48L2poaS1ib29sZWFuPlxuICpcbiAqIC0gRGlzcGxheSBhIGdyZWVuIGNoZWNrIHdoZW4gaW5wdXRCb29sZWFuVmFyaWFibGUgaXMgdHJ1ZVxuICogLSBEaXNwbGF5IGEgcmVkIGNyb3NzIHdoZW4gaW5wdXRCb29sZWFuVmFyaWFibGUgaXMgZmFsc2VcbiAqXG4gKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKlxuICpcbiAqIDxqaGktYm9vbGVhblxuICogICAgIFt2YWx1ZV09XCJpbnB1dEJvb2xlYW5WYXJpYWJsZVwiPlxuICogICAgIGNsYXNzVHJ1ZT1cImZhIGZhLWxnIGZhLWNoZWNrIHRleHQtcHJpbWFyeVwiXG4gKiAgICAgY2xhc3NGYWxzZT1cImZhIGZhLWxnIGZhLXRpbWVzIHRleHQtd2FybmluZ1wiXG4gKiA8L2poaS1ib29sZWFuPlxuICpcbiAqIC0gRGlzcGxheSBhIGJsdWUgY2hlY2sgd2hlbiBpbnB1dEJvb2xlYW5WYXJpYWJsZSBpcyB0cnVlXG4gKiAtIERpc3BsYXkgYW4gb3JhbmdlIGNyb3NzIHdoZW4gaW5wdXRCb29sZWFuVmFyaWFibGUgaXMgZmFsc2VcbiAqXG4gKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKlxuICpcbiAqIDxqaGktYm9vbGVhblxuICogICAgIFt2YWx1ZV09XCJpbnB1dEJvb2xlYW5WYXJpYWJsZVwiPlxuICogICAgIGNsYXNzVHJ1ZT1cImZhIGZhLWxnIGZhLWNoZWNrXCJcbiAqICAgICBjbGFzc0ZhbHNlPVwiXCJcbiAqIDwvamhpLWJvb2xlYW4+XG4gKlxuICogLSBEaXNwbGF5IGEgYmxhY2sgY2hlY2sgd2hlbiBpbnB1dEJvb2xlYW5WYXJpYWJsZSBpcyB0cnVlXG4gKiAtIERvIG5vdCBkaXNwbGF5IGFueXRoaW5nIHdoZW4gaW5wdXRCb29sZWFuVmFyaWFibGUgaXMgZmFsc2VcbiAqXG4gKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKlxuICpcbiAqIDxqaGktYm9vbGVhblxuICogICAgIFt2YWx1ZV09XCJpbnB1dEJvb2xlYW5WYXJpYWJsZVwiXG4gKiAgICAgW3RleHRUcnVlXT1cIid1c2VyTWFuYWdlbWVudC5hY3RpdmF0ZWQnIHwgdHJhbnNsYXRlXCJcbiAqICAgICB0ZXh0RmFsc2U9XCJkZWFjdGl2YXRlZFwiPlxuICogPC9qaGktYm9vbGVhbj5cbiAqXG4gKiAtIERpc3BsYXkgYSBncmVlbiBiYWRnZSB3aGVuIGlucHV0Qm9vbGVhblZhcmlhYmxlIGlzIHRydWVcbiAqIC0gRGlzcGxheSBhIHJlZCBiYWRnZSB3aGVuIGlucHV0Qm9vbGVhblZhcmlhYmxlIGlzIGZhbHNlXG4gKlxuICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICpcbiAqXG4gKiA8amhpLWJvb2xlYW5cbiAqICAgICBbdmFsdWVdPVwidXNlci5hY3RpdmF0ZWRcIlxuICogICAgIGNsYXNzVHJ1ZT1cImJhZGdlIGJhZGdlLXdhcm5pbmdcIlxuICogICAgIGNsYXNzRmFsc2U9XCJiYWRnZSBiYWRnZS1pbmZvXCJcbiAqICAgICBbdGV4dFRydWVdPVwiJ3VzZXJNYW5hZ2VtZW50LmFjdGl2YXRlZCcgfCB0cmFuc2xhdGVcIlxuICogICAgIHRleHRGYWxzZT1cImRlYWN0aXZhdGVkXCI+XG4gKiA8L2poaS1ib29sZWFuPlxuICpcbiAqIC0gRGlzcGxheSBhbiBvcmFuZ2UgYmFkZ2UgYW5kIHdyaXRlICdhY3RpdmF0ZWQnIHdoZW4gaW5wdXRCb29sZWFuVmFyaWFibGUgaXMgdHJ1ZVxuICogLSBEaXNwbGF5IGEgYmx1ZSBiYWRnZSBhbmQgd3JpdGUgJ2RlYWN0aXZhdGVkJyB3aGVuIGlucHV0Qm9vbGVhblZhcmlhYmxlIGlzIGZhbHNlXG4gKi9cbmV4cG9ydCBkZWNsYXJlIGNsYXNzIEpoaUJvb2xlYW5Db21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQge1xuICAgIC8qKlxuICAgICAqIHRoZSBib29sZWFuIGlucHV0IHZhbHVlXG4gICAgICovXG4gICAgdmFsdWU6IGJvb2xlYW47XG4gICAgLyoqXG4gICAgICogdGhlIGNsYXNzKGVzKSAoc3BhY2Ugc2VwYXJhdGVkKSB0aGF0IHdpbGwgYmUgYXBwbGllZCBpZiB2YWx1ZSBpcyB0cnVlXG4gICAgICovXG4gICAgY2xhc3NUcnVlOiBzdHJpbmc7XG4gICAgLyoqXG4gICAgICogdGhlIGNsYXNzKGVzKSAoc3BhY2Ugc2VwYXJhdGVkKSB0aGF0IHdpbGwgYmUgYXBwbGllZCBpZiB0aGUgaW5wdXQgdmFsdWUgaXMgZmFsc2VcbiAgICAgKi9cbiAgICBjbGFzc0ZhbHNlOiBzdHJpbmc7XG4gICAgLyoqXG4gICAgICogdGhlIHRleHQgdGhhdCB3aWxsIGJlIGRpc3BsYXllZCBpZiB0aGUgaW5wdXQgdmFsdWUgaXMgdHJ1ZVxuICAgICAqL1xuICAgIHRleHRUcnVlOiBzdHJpbmc7XG4gICAgLyoqXG4gICAgICogdGhlIHRleHQgdGhhdCB3aWxsIGJlIGRpc3BsYXllZCBpZiB0aGUgaW5wdXQgdmFsdWUgaXMgZmFsc2VcbiAgICAgKi9cbiAgICB0ZXh0RmFsc2U6IHN0cmluZztcbiAgICBjb25maWc6IEpoaU1vZHVsZUNvbmZpZztcbiAgICBjb25zdHJ1Y3Rvcihjb25maWdTZXJ2aWNlOiBKaGlDb25maWdTZXJ2aWNlKTtcbiAgICBuZ09uSW5pdCgpOiB2b2lkO1xufVxuIl19