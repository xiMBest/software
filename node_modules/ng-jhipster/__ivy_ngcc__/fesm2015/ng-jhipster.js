import { __decorate, __param } from 'tslib';
import { ɵɵdefineInjectable, Injectable, ɵɵinject, Input, Component, Directive, forwardRef, EventEmitter, Output, Host, ContentChild, HostListener, ElementRef, Optional, Pipe, NgModule, SecurityContext } from '@angular/core';
import { faSort, faSortUp, faSortDown } from '@fortawesome/free-solid-svg-icons';
import { NG_VALIDATORS, FormsModule } from '@angular/forms';
import { FaIconComponent } from '@fortawesome/angular-fontawesome';
import { TranslateService } from '@ngx-translate/core';
import { Subject, Observable } from 'rxjs';
import { takeUntil, share, filter, map } from 'rxjs/operators';
import { CommonModule, DatePipe } from '@angular/common';
import { NgbActiveModal, NgbModal, NgbModule } from '@ng-bootstrap/ng-bootstrap';
import { TranslateHttpLoader } from '@ngx-translate/http-loader';
import { DomSanitizer } from '@angular/platform-browser';

import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/common';
import * as ɵngcc2 from '@ngx-translate/core';
import * as ɵngcc3 from '@ng-bootstrap/ng-bootstrap';
import * as ɵngcc4 from '@angular/forms';
import * as ɵngcc5 from '@angular/platform-browser';

function JhiItemCountComponent_div_0_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 3);
    ɵngcc0.ɵɵtext(1, " /* [attr.translateValues] is used to get entire values in tests */ ");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r209 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("translateValues", ctx_r209.i18nValues());
} }
function JhiItemCountComponent_ng_template_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵtext(0);
} if (rf & 2) {
    const ctx_r211 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵtextInterpolate3(" Showing ", (ctx_r211.page - 1) * ctx_r211.itemsPerPage == 0 ? 1 : (ctx_r211.page - 1) * ctx_r211.itemsPerPage + 1, " - ", ctx_r211.page * ctx_r211.itemsPerPage < ctx_r211.total ? ctx_r211.page * ctx_r211.itemsPerPage : ctx_r211.total, " of ", ctx_r211.total, " items. ");
} }
function JhiThreadModalComponent_div_35_div_12_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 30);
    ɵngcc0.ɵɵelementStart(1, "samp");
    ɵngcc0.ɵɵtext(2);
    ɵngcc0.ɵɵelementStart(3, "code");
    ɵngcc0.ɵɵtext(4);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵtext(5, ")");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelement(6, "span", 31);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const st_r215 = ctx.$implicit;
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate2("", st_r215.value.className, ".", st_r215.value.methodName, "(");
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate2("", st_r215.value.fileName, ":", st_r215.value.lineNumber, "");
} }
function JhiThreadModalComponent_div_35_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 15);
    ɵngcc0.ɵɵelementStart(1, "h6");
    ɵngcc0.ɵɵelementStart(2, "span", 16);
    ɵngcc0.ɵɵtext(3);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵtext(4);
    ɵngcc0.ɵɵelementStart(5, "a", 17);
    ɵngcc0.ɵɵlistener("click", function JhiThreadModalComponent_div_35_Template_a_click_5_listener() { const entry_r213 = ctx.$implicit; return entry_r213.show = !entry_r213.show; });
    ɵngcc0.ɵɵelementStart(6, "span", 18);
    ɵngcc0.ɵɵtext(7, "Show StackTrace");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(8, "span", 19);
    ɵngcc0.ɵɵtext(9, "Hide StackTrace");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(10, "div", 20);
    ɵngcc0.ɵɵelementStart(11, "div", 21);
    ɵngcc0.ɵɵtemplate(12, JhiThreadModalComponent_div_35_div_12_Template, 7, 4, "div", 22);
    ɵngcc0.ɵɵpipe(13, "keys");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(14, "table", 23);
    ɵngcc0.ɵɵelementStart(15, "thead");
    ɵngcc0.ɵɵelementStart(16, "tr");
    ɵngcc0.ɵɵelementStart(17, "th", 24);
    ɵngcc0.ɵɵtext(18, "Blocked Time");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(19, "th", 25);
    ɵngcc0.ɵɵtext(20, "Blocked Count");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(21, "th", 26);
    ɵngcc0.ɵɵtext(22, "Waited Time");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(23, "th", 27);
    ɵngcc0.ɵɵtext(24, "Waited Count");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(25, "th", 28);
    ɵngcc0.ɵɵtext(26, "Lock Name");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(27, "tbody");
    ɵngcc0.ɵɵelementStart(28, "tr");
    ɵngcc0.ɵɵelementStart(29, "td");
    ɵngcc0.ɵɵtext(30);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(31, "td");
    ɵngcc0.ɵɵtext(32);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(33, "td");
    ɵngcc0.ɵɵtext(34);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(35, "td");
    ɵngcc0.ɵɵtext(36);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(37, "td", 29);
    ɵngcc0.ɵɵelementStart(38, "code");
    ɵngcc0.ɵɵtext(39);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const entry_r213 = ctx.$implicit;
    const ctx_r212 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("ngClass", ctx_r212.getBadgeClass(entry_r213.value.threadState));
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate(entry_r213.value.threadState);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate2("\u00A0", entry_r213.value.threadName, " (ID ", entry_r213.value.threadId, ") ");
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("hidden", entry_r213.show);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("hidden", !entry_r213.show);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("hidden", !entry_r213.show);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("ngForOf", ɵngcc0.ɵɵpipeBind1(13, 14, entry_r213.value.stackTrace));
    ɵngcc0.ɵɵadvance(18);
    ɵngcc0.ɵɵtextInterpolate(entry_r213.value.blockedTime);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate(entry_r213.value.blockedCount);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate(entry_r213.value.waitedTime);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate(entry_r213.value.waitedCount);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵpropertyInterpolate("title", entry_r213.value.lockName);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate(entry_r213.value.lockName);
} }
function JhiJvmMemoryComponent_div_2_div_1_span_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "span");
    ɵngcc0.ɵɵelementStart(1, "span");
    ɵngcc0.ɵɵtext(2);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵtext(3);
    ɵngcc0.ɵɵpipe(4, "number");
    ɵngcc0.ɵɵpipe(5, "number");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const entry_r219 = ɵngcc0.ɵɵnextContext().$implicit;
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate(entry_r219.key);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate2(" (", ɵngcc0.ɵɵpipeBind2(4, 3, entry_r219.value.used / 1048576, "1.0-0"), "M / ", ɵngcc0.ɵɵpipeBind2(5, 6, entry_r219.value.max / 1048576, "1.0-0"), "M) ");
} }
function JhiJvmMemoryComponent_div_2_div_1_ng_template_5_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "span");
    ɵngcc0.ɵɵelementStart(1, "span");
    ɵngcc0.ɵɵtext(2);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵtext(3);
    ɵngcc0.ɵɵpipe(4, "number");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const entry_r219 = ɵngcc0.ɵɵnextContext().$implicit;
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate(entry_r219.key);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind2(4, 2, entry_r219.value.used / 1048576, "1.0-0"), "M");
} }
function JhiJvmMemoryComponent_div_2_div_1_ngb_progressbar_7_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "ngb-progressbar", 6);
    ɵngcc0.ɵɵelementStart(1, "span");
    ɵngcc0.ɵɵtext(2);
    ɵngcc0.ɵɵpipe(3, "number");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const entry_r219 = ɵngcc0.ɵɵnextContext().$implicit;
    ɵngcc0.ɵɵproperty("value", 100 * entry_r219.value.used / entry_r219.value.max)("striped", true)("animated", false);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate1("", ɵngcc0.ɵɵpipeBind2(3, 4, entry_r219.value.used * 100 / entry_r219.value.max, "1.0-0"), "%");
} }
function JhiJvmMemoryComponent_div_2_div_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div");
    ɵngcc0.ɵɵtemplate(1, JhiJvmMemoryComponent_div_2_div_1_span_1_Template, 6, 9, "span", 3);
    ɵngcc0.ɵɵelementStart(2, "div");
    ɵngcc0.ɵɵtext(3);
    ɵngcc0.ɵɵpipe(4, "number");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵtemplate(5, JhiJvmMemoryComponent_div_2_div_1_ng_template_5_Template, 5, 5, "ng-template", null, 4, ɵngcc0.ɵɵtemplateRefExtractor);
    ɵngcc0.ɵɵtemplate(7, JhiJvmMemoryComponent_div_2_div_1_ngb_progressbar_7_Template, 4, 7, "ngb-progressbar", 5);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const entry_r219 = ctx.$implicit;
    const _r221 = ɵngcc0.ɵɵreference(6);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", entry_r219.value.max != 0 - 1)("ngIfElse", _r221);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate1("Committed : ", ɵngcc0.ɵɵpipeBind2(4, 4, entry_r219.value.committed / 1048576, "1.0-0"), "M");
    ɵngcc0.ɵɵadvance(4);
    ɵngcc0.ɵɵproperty("ngIf", entry_r219.value.max != 0 - 1);
} }
function JhiJvmMemoryComponent_div_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div");
    ɵngcc0.ɵɵtemplate(1, JhiJvmMemoryComponent_div_2_div_1_Template, 8, 7, "div", 2);
    ɵngcc0.ɵɵpipe(2, "keys");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r217 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngForOf", ɵngcc0.ɵɵpipeBind1(2, 1, ctx_r217.jvmMemoryMetrics));
} }
function JhiMetricsCacheComponent_div_2_tr_23_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "tr");
    ɵngcc0.ɵɵelementStart(1, "td");
    ɵngcc0.ɵɵtext(2);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(3, "td", 14);
    ɵngcc0.ɵɵtext(4);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(5, "td", 14);
    ɵngcc0.ɵɵtext(6);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(7, "td", 14);
    ɵngcc0.ɵɵtext(8);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(9, "td", 14);
    ɵngcc0.ɵɵtext(10);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(11, "td", 14);
    ɵngcc0.ɵɵtext(12);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(13, "td", 14);
    ɵngcc0.ɵɵtext(14);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(15, "td", 14);
    ɵngcc0.ɵɵtext(16);
    ɵngcc0.ɵɵpipe(17, "number");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(18, "td", 14);
    ɵngcc0.ɵɵtext(19);
    ɵngcc0.ɵɵpipe(20, "number");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const entry_r229 = ctx.$implicit;
    const ctx_r228 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate(entry_r229.key);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate(entry_r229.value["cache.gets.hit"]);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate(entry_r229.value["cache.gets.miss"]);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate(entry_r229.value["cache.gets.hit"] + entry_r229.value["cache.gets.miss"]);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate(entry_r229.value["cache.puts"]);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate(entry_r229.value["cache.removals"]);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate(entry_r229.value["cache.evictions"]);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind2(17, 9, ctx_r228.filterNaN(100 * entry_r229.value["cache.gets.hit"] / (entry_r229.value["cache.gets.hit"] + entry_r229.value["cache.gets.miss"])), "1.0-4"), " ");
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind2(20, 12, ctx_r228.filterNaN(100 * entry_r229.value["cache.gets.miss"] / (entry_r229.value["cache.gets.hit"] + entry_r229.value["cache.gets.miss"])), "1.0-4"), " ");
} }
function JhiMetricsCacheComponent_div_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 2);
    ɵngcc0.ɵɵelementStart(1, "table", 3);
    ɵngcc0.ɵɵelementStart(2, "thead");
    ɵngcc0.ɵɵelementStart(3, "tr");
    ɵngcc0.ɵɵelementStart(4, "th", 4);
    ɵngcc0.ɵɵtext(5, "Cache name");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(6, "th", 5);
    ɵngcc0.ɵɵtext(7, "Cache Hits");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(8, "th", 6);
    ɵngcc0.ɵɵtext(9, "Cache Misses");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(10, "th", 7);
    ɵngcc0.ɵɵtext(11, "Cache Gets");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(12, "th", 8);
    ɵngcc0.ɵɵtext(13, "Cache Puts");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(14, "th", 9);
    ɵngcc0.ɵɵtext(15, "Cache Removals");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(16, "th", 10);
    ɵngcc0.ɵɵtext(17, "Cache Evictions");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(18, "th", 11);
    ɵngcc0.ɵɵtext(19, "Cache Hit %");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(20, "th", 12);
    ɵngcc0.ɵɵtext(21, "Cache Miss %");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(22, "tbody");
    ɵngcc0.ɵɵtemplate(23, JhiMetricsCacheComponent_div_2_tr_23_Template, 21, 15, "tr", 13);
    ɵngcc0.ɵɵpipe(24, "keys");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r227 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(23);
    ɵngcc0.ɵɵproperty("ngForOf", ɵngcc0.ɵɵpipeBind1(24, 1, ctx_r227.cacheMetrics));
} }
function JhiMetricsDatasourceComponent_div_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 2);
    ɵngcc0.ɵɵelementStart(1, "table", 3);
    ɵngcc0.ɵɵelementStart(2, "thead");
    ɵngcc0.ɵɵelementStart(3, "tr");
    ɵngcc0.ɵɵelementStart(4, "th");
    ɵngcc0.ɵɵelementStart(5, "span", 4);
    ɵngcc0.ɵɵtext(6, "Connection Pool Usage");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵtext(7);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(8, "th", 5);
    ɵngcc0.ɵɵtext(9, "Count");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(10, "th", 6);
    ɵngcc0.ɵɵtext(11, "Mean");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(12, "th", 7);
    ɵngcc0.ɵɵtext(13, "Min");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(14, "th", 8);
    ɵngcc0.ɵɵtext(15, "p50");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(16, "th", 9);
    ɵngcc0.ɵɵtext(17, "p75");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(18, "th", 10);
    ɵngcc0.ɵɵtext(19, "p95");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(20, "th", 11);
    ɵngcc0.ɵɵtext(21, "p99");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(22, "th", 12);
    ɵngcc0.ɵɵtext(23, "Max");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(24, "tbody");
    ɵngcc0.ɵɵelementStart(25, "tr");
    ɵngcc0.ɵɵelementStart(26, "td");
    ɵngcc0.ɵɵtext(27, "Acquire");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(28, "td", 13);
    ɵngcc0.ɵɵtext(29);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(30, "td", 13);
    ɵngcc0.ɵɵtext(31);
    ɵngcc0.ɵɵpipe(32, "number");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(33, "td", 13);
    ɵngcc0.ɵɵtext(34);
    ɵngcc0.ɵɵpipe(35, "number");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(36, "td", 13);
    ɵngcc0.ɵɵtext(37);
    ɵngcc0.ɵɵpipe(38, "number");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(39, "td", 13);
    ɵngcc0.ɵɵtext(40);
    ɵngcc0.ɵɵpipe(41, "number");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(42, "td", 13);
    ɵngcc0.ɵɵtext(43);
    ɵngcc0.ɵɵpipe(44, "number");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(45, "td", 13);
    ɵngcc0.ɵɵtext(46);
    ɵngcc0.ɵɵpipe(47, "number");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(48, "td", 13);
    ɵngcc0.ɵɵtext(49);
    ɵngcc0.ɵɵpipe(50, "number");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(51, "tr");
    ɵngcc0.ɵɵelementStart(52, "td");
    ɵngcc0.ɵɵtext(53, "Creation");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(54, "td", 13);
    ɵngcc0.ɵɵtext(55);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(56, "td", 13);
    ɵngcc0.ɵɵtext(57);
    ɵngcc0.ɵɵpipe(58, "number");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(59, "td", 13);
    ɵngcc0.ɵɵtext(60);
    ɵngcc0.ɵɵpipe(61, "number");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(62, "td", 13);
    ɵngcc0.ɵɵtext(63);
    ɵngcc0.ɵɵpipe(64, "number");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(65, "td", 13);
    ɵngcc0.ɵɵtext(66);
    ɵngcc0.ɵɵpipe(67, "number");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(68, "td", 13);
    ɵngcc0.ɵɵtext(69);
    ɵngcc0.ɵɵpipe(70, "number");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(71, "td", 13);
    ɵngcc0.ɵɵtext(72);
    ɵngcc0.ɵɵpipe(73, "number");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(74, "td", 13);
    ɵngcc0.ɵɵtext(75);
    ɵngcc0.ɵɵpipe(76, "number");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(77, "tr");
    ɵngcc0.ɵɵelementStart(78, "td");
    ɵngcc0.ɵɵtext(79, "Usage");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(80, "td", 13);
    ɵngcc0.ɵɵtext(81);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(82, "td", 13);
    ɵngcc0.ɵɵtext(83);
    ɵngcc0.ɵɵpipe(84, "number");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(85, "td", 13);
    ɵngcc0.ɵɵtext(86);
    ɵngcc0.ɵɵpipe(87, "number");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(88, "td", 13);
    ɵngcc0.ɵɵtext(89);
    ɵngcc0.ɵɵpipe(90, "number");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(91, "td", 13);
    ɵngcc0.ɵɵtext(92);
    ɵngcc0.ɵɵpipe(93, "number");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(94, "td", 13);
    ɵngcc0.ɵɵtext(95);
    ɵngcc0.ɵɵpipe(96, "number");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(97, "td", 13);
    ɵngcc0.ɵɵtext(98);
    ɵngcc0.ɵɵpipe(99, "number");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(100, "td", 13);
    ɵngcc0.ɵɵtext(101);
    ɵngcc0.ɵɵpipe(102, "number");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r230 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(7);
    ɵngcc0.ɵɵtextInterpolate4(" (active: ", ctx_r230.datasourceMetrics.active.value, ", min: ", ctx_r230.datasourceMetrics.min.value, ", max: ", ctx_r230.datasourceMetrics.max.value, ", idle: ", ctx_r230.datasourceMetrics.idle.value, ") ");
    ɵngcc0.ɵɵadvance(22);
    ɵngcc0.ɵɵtextInterpolate(ctx_r230.datasourceMetrics.acquire.count);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind2(32, 28, ctx_r230.filterNaN(ctx_r230.datasourceMetrics.acquire.mean), "1.0-2"));
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind2(35, 31, ctx_r230.datasourceMetrics.acquire["0.0"], "1.0-3"));
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind2(38, 34, ctx_r230.datasourceMetrics.acquire["0.5"], "1.0-3"));
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind2(41, 37, ctx_r230.datasourceMetrics.acquire["0.75"], "1.0-3"));
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind2(44, 40, ctx_r230.datasourceMetrics.acquire["0.95"], "1.0-3"));
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind2(47, 43, ctx_r230.datasourceMetrics.acquire["0.99"], "1.0-3"));
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind2(50, 46, ctx_r230.filterNaN(ctx_r230.datasourceMetrics.acquire.max), "1.0-2"));
    ɵngcc0.ɵɵadvance(6);
    ɵngcc0.ɵɵtextInterpolate(ctx_r230.datasourceMetrics.creation.count);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind2(58, 49, ctx_r230.filterNaN(ctx_r230.datasourceMetrics.creation.mean), "1.0-2"));
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind2(61, 52, ctx_r230.datasourceMetrics.creation["0.0"], "1.0-3"));
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind2(64, 55, ctx_r230.datasourceMetrics.creation["0.5"], "1.0-3"));
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind2(67, 58, ctx_r230.datasourceMetrics.creation["0.75"], "1.0-3"));
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind2(70, 61, ctx_r230.datasourceMetrics.creation["0.95"], "1.0-3"));
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind2(73, 64, ctx_r230.datasourceMetrics.creation["0.99"], "1.0-3"));
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind2(76, 67, ctx_r230.filterNaN(ctx_r230.datasourceMetrics.creation.max), "1.0-2"));
    ɵngcc0.ɵɵadvance(6);
    ɵngcc0.ɵɵtextInterpolate(ctx_r230.datasourceMetrics.usage.count);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind2(84, 70, ctx_r230.filterNaN(ctx_r230.datasourceMetrics.usage.mean), "1.0-2"));
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind2(87, 73, ctx_r230.datasourceMetrics.usage["0.0"], "1.0-3"));
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind2(90, 76, ctx_r230.datasourceMetrics.usage["0.5"], "1.0-3"));
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind2(93, 79, ctx_r230.datasourceMetrics.usage["0.75"], "1.0-3"));
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind2(96, 82, ctx_r230.datasourceMetrics.usage["0.95"], "1.0-3"));
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind2(99, 85, ctx_r230.datasourceMetrics.usage["0.99"], "1.0-3"));
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind2(102, 88, ctx_r230.filterNaN(ctx_r230.datasourceMetrics.usage.max), "1.0-2"));
} }
function JhiMetricsEndpointsRequestsComponent_div_2_ng_container_13_tr_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "tr");
    ɵngcc0.ɵɵelementStart(1, "td");
    ɵngcc0.ɵɵtext(2);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(3, "td");
    ɵngcc0.ɵɵtext(4);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(5, "td", 3);
    ɵngcc0.ɵɵtext(6);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(7, "td", 3);
    ɵngcc0.ɵɵtext(8);
    ɵngcc0.ɵɵpipe(9, "number");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const method_r235 = ctx.$implicit;
    const entry_r233 = ɵngcc0.ɵɵnextContext().$implicit;
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate(method_r235.key);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate(entry_r233.key);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate(method_r235.value.count);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind2(9, 4, method_r235.value.mean, "1.0-3"));
} }
function JhiMetricsEndpointsRequestsComponent_div_2_ng_container_13_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵtemplate(1, JhiMetricsEndpointsRequestsComponent_div_2_ng_container_13_tr_1_Template, 10, 7, "tr", 4);
    ɵngcc0.ɵɵpipe(2, "keys");
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const entry_r233 = ctx.$implicit;
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngForOf", ɵngcc0.ɵɵpipeBind1(2, 1, entry_r233.value));
} }
function JhiMetricsEndpointsRequestsComponent_div_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 1);
    ɵngcc0.ɵɵelementStart(1, "table", 2);
    ɵngcc0.ɵɵelementStart(2, "thead");
    ɵngcc0.ɵɵelementStart(3, "tr");
    ɵngcc0.ɵɵelementStart(4, "th");
    ɵngcc0.ɵɵtext(5, "Method");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(6, "th");
    ɵngcc0.ɵɵtext(7, "Endpoint url");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(8, "th", 3);
    ɵngcc0.ɵɵtext(9, "Count");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(10, "th", 3);
    ɵngcc0.ɵɵtext(11, "Mean");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(12, "tbody");
    ɵngcc0.ɵɵtemplate(13, JhiMetricsEndpointsRequestsComponent_div_2_ng_container_13_Template, 3, 3, "ng-container", 4);
    ɵngcc0.ɵɵpipe(14, "keys");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r231 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(13);
    ɵngcc0.ɵɵproperty("ngForOf", ɵngcc0.ɵɵpipeBind1(14, 1, ctx_r231.endpointsRequestsMetrics));
} }
function JhiMetricsGarbageCollectorComponent_div_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div");
    ɵngcc0.ɵɵelementStart(1, "span");
    ɵngcc0.ɵɵtext(2);
    ɵngcc0.ɵɵpipe(3, "number");
    ɵngcc0.ɵɵpipe(4, "number");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(5, "ngb-progressbar", 5);
    ɵngcc0.ɵɵelementStart(6, "span");
    ɵngcc0.ɵɵtext(7);
    ɵngcc0.ɵɵpipe(8, "number");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r237 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate2(" GC Live Data Size/GC Max Data Size (", ɵngcc0.ɵɵpipeBind2(3, 7, ctx_r237.garbageCollectorMetrics["jvm.gc.live.data.size"] / 1048576, "1.0-0"), "M / ", ɵngcc0.ɵɵpipeBind2(4, 10, ctx_r237.garbageCollectorMetrics["jvm.gc.max.data.size"] / 1048576, "1.0-0"), "M)");
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵproperty("max", ctx_r237.garbageCollectorMetrics["jvm.gc.max.data.size"])("value", ctx_r237.garbageCollectorMetrics["jvm.gc.live.data.size"])("striped", true)("animated", false);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate1("", ɵngcc0.ɵɵpipeBind2(8, 13, 100 * ctx_r237.garbageCollectorMetrics["jvm.gc.live.data.size"] / ctx_r237.garbageCollectorMetrics["jvm.gc.max.data.size"], "1.0-2"), "%");
} }
function JhiMetricsGarbageCollectorComponent_div_4_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div");
    ɵngcc0.ɵɵelementStart(1, "span");
    ɵngcc0.ɵɵtext(2);
    ɵngcc0.ɵɵpipe(3, "number");
    ɵngcc0.ɵɵpipe(4, "number");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(5, "ngb-progressbar", 5);
    ɵngcc0.ɵɵelementStart(6, "span");
    ɵngcc0.ɵɵtext(7);
    ɵngcc0.ɵɵpipe(8, "number");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r238 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate2(" GC Memory Promoted/GC Memory Allocated (", ɵngcc0.ɵɵpipeBind2(3, 7, ctx_r238.garbageCollectorMetrics["jvm.gc.memory.promoted"] / 1048576, "1.0-0"), "M / ", ɵngcc0.ɵɵpipeBind2(4, 10, ctx_r238.garbageCollectorMetrics["jvm.gc.memory.allocated"] / 1048576, "1.0-0"), "M)");
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵproperty("max", ctx_r238.garbageCollectorMetrics["jvm.gc.memory.allocated"])("value", ctx_r238.garbageCollectorMetrics["jvm.gc.memory.promoted"])("striped", true)("animated", false);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate1("", ɵngcc0.ɵɵpipeBind2(8, 13, 100 * ctx_r238.garbageCollectorMetrics["jvm.gc.memory.promoted"] / ctx_r238.garbageCollectorMetrics["jvm.gc.memory.allocated"], "1.0-2"), "%");
} }
function JhiMetricsGarbageCollectorComponent_div_6_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 0);
    ɵngcc0.ɵɵelementStart(1, "div", 6);
    ɵngcc0.ɵɵtext(2, "Classes loaded");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(3, "div", 7);
    ɵngcc0.ɵɵtext(4);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r239 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(4);
    ɵngcc0.ɵɵtextInterpolate(ctx_r239.garbageCollectorMetrics.classesLoaded);
} }
function JhiMetricsGarbageCollectorComponent_div_7_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 0);
    ɵngcc0.ɵɵelementStart(1, "div", 6);
    ɵngcc0.ɵɵtext(2, "Classes unloaded");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(3, "div", 7);
    ɵngcc0.ɵɵtext(4);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r240 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(4);
    ɵngcc0.ɵɵtextInterpolate(ctx_r240.garbageCollectorMetrics.classesUnloaded);
} }
function JhiMetricsGarbageCollectorComponent_div_8_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 8);
    ɵngcc0.ɵɵelementStart(1, "table", 9);
    ɵngcc0.ɵɵelementStart(2, "thead");
    ɵngcc0.ɵɵelementStart(3, "tr");
    ɵngcc0.ɵɵelement(4, "th");
    ɵngcc0.ɵɵelementStart(5, "th", 10);
    ɵngcc0.ɵɵtext(6, "Count");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(7, "th", 11);
    ɵngcc0.ɵɵtext(8, "Mean");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(9, "th", 12);
    ɵngcc0.ɵɵtext(10, "Min");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(11, "th", 13);
    ɵngcc0.ɵɵtext(12, "p50");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(13, "th", 14);
    ɵngcc0.ɵɵtext(14, "p75");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(15, "th", 15);
    ɵngcc0.ɵɵtext(16, "p95");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(17, "th", 16);
    ɵngcc0.ɵɵtext(18, "p99");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(19, "th", 17);
    ɵngcc0.ɵɵtext(20, "Max");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(21, "tbody");
    ɵngcc0.ɵɵelementStart(22, "tr");
    ɵngcc0.ɵɵelementStart(23, "td");
    ɵngcc0.ɵɵtext(24, "jvm.gc.pause");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(25, "td", 18);
    ɵngcc0.ɵɵtext(26);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(27, "td", 18);
    ɵngcc0.ɵɵtext(28);
    ɵngcc0.ɵɵpipe(29, "number");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(30, "td", 18);
    ɵngcc0.ɵɵtext(31);
    ɵngcc0.ɵɵpipe(32, "number");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(33, "td", 18);
    ɵngcc0.ɵɵtext(34);
    ɵngcc0.ɵɵpipe(35, "number");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(36, "td", 18);
    ɵngcc0.ɵɵtext(37);
    ɵngcc0.ɵɵpipe(38, "number");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(39, "td", 18);
    ɵngcc0.ɵɵtext(40);
    ɵngcc0.ɵɵpipe(41, "number");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(42, "td", 18);
    ɵngcc0.ɵɵtext(43);
    ɵngcc0.ɵɵpipe(44, "number");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(45, "td", 18);
    ɵngcc0.ɵɵtext(46);
    ɵngcc0.ɵɵpipe(47, "number");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r241 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(26);
    ɵngcc0.ɵɵtextInterpolate(ctx_r241.garbageCollectorMetrics["jvm.gc.pause"].count);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind2(29, 8, ctx_r241.garbageCollectorMetrics["jvm.gc.pause"].mean, "1.0-3"));
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind2(32, 11, ctx_r241.garbageCollectorMetrics["jvm.gc.pause"]["0.0"], "1.0-3"));
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind2(35, 14, ctx_r241.garbageCollectorMetrics["jvm.gc.pause"]["0.5"], "1.0-3"));
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind2(38, 17, ctx_r241.garbageCollectorMetrics["jvm.gc.pause"]["0.75"], "1.0-3"));
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind2(41, 20, ctx_r241.garbageCollectorMetrics["jvm.gc.pause"]["0.95"], "1.0-3"));
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind2(44, 23, ctx_r241.garbageCollectorMetrics["jvm.gc.pause"]["0.99"], "1.0-3"));
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind2(47, 26, ctx_r241.garbageCollectorMetrics["jvm.gc.pause"].max, "1.0-3"));
} }
function JhiMetricsHttpRequestComponent_table_2_tr_12_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "tr");
    ɵngcc0.ɵɵelementStart(1, "td");
    ɵngcc0.ɵɵtext(2);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(3, "td");
    ɵngcc0.ɵɵelementStart(4, "ngb-progressbar", 8);
    ɵngcc0.ɵɵelementStart(5, "span");
    ɵngcc0.ɵɵtext(6);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(7, "td", 9);
    ɵngcc0.ɵɵtext(8);
    ɵngcc0.ɵɵpipe(9, "number");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(10, "td", 9);
    ɵngcc0.ɵɵtext(11);
    ɵngcc0.ɵɵpipe(12, "number");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const entry_r244 = ctx.$implicit;
    const ctx_r243 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate(entry_r244.key);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("max", ctx_r243.requestMetrics["all"].count)("value", entry_r244.value.count)("striped", true)("animated", false);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate(entry_r244.value.count);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind2(9, 8, ctx_r243.filterNaN(entry_r244.value.mean), "1.0-2"), " ");
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind2(12, 11, entry_r244.value.max, "1.0-2"));
} }
function JhiMetricsHttpRequestComponent_table_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "table", 2);
    ɵngcc0.ɵɵelementStart(1, "thead");
    ɵngcc0.ɵɵelementStart(2, "tr");
    ɵngcc0.ɵɵelementStart(3, "th", 3);
    ɵngcc0.ɵɵtext(4, "Code");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(5, "th", 4);
    ɵngcc0.ɵɵtext(6, "Count");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(7, "th", 5);
    ɵngcc0.ɵɵtext(8, "Mean");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(9, "th", 6);
    ɵngcc0.ɵɵtext(10, "Max");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(11, "tbody");
    ɵngcc0.ɵɵtemplate(12, JhiMetricsHttpRequestComponent_table_2_tr_12_Template, 13, 14, "tr", 7);
    ɵngcc0.ɵɵpipe(13, "keys");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r242 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(12);
    ɵngcc0.ɵɵproperty("ngForOf", ɵngcc0.ɵɵpipeBind1(13, 1, ctx_r242.requestMetrics["percode"]));
} }
function JhiMetricsSystemComponent_div_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 2);
    ɵngcc0.ɵɵelementStart(1, "div", 3);
    ɵngcc0.ɵɵtext(2, "Uptime");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(3, "div", 4);
    ɵngcc0.ɵɵtext(4);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r245 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(4);
    ɵngcc0.ɵɵtextInterpolate(ctx_r245.convertMillisecondsToDuration(ctx_r245.systemMetrics["process.uptime"]));
} }
function JhiMetricsSystemComponent_div_3_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 2);
    ɵngcc0.ɵɵelementStart(1, "div", 3);
    ɵngcc0.ɵɵtext(2, "Start time");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(3, "div", 4);
    ɵngcc0.ɵɵtext(4);
    ɵngcc0.ɵɵpipe(5, "date");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r246 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(4);
    ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind2(5, 1, ctx_r246.systemMetrics["process.start.time"], "full"));
} }
function JhiMetricsSystemComponent_div_4_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 2);
    ɵngcc0.ɵɵelementStart(1, "div", 5);
    ɵngcc0.ɵɵtext(2, "Process CPU usage");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(3, "div", 6);
    ɵngcc0.ɵɵtext(4);
    ɵngcc0.ɵɵpipe(5, "number");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r247 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(4);
    ɵngcc0.ɵɵtextInterpolate1("", ɵngcc0.ɵɵpipeBind2(5, 1, 100 * ctx_r247.systemMetrics["process.cpu.usage"], "1.0-2"), " %");
} }
function JhiMetricsSystemComponent_ngb_progressbar_5_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "ngb-progressbar", 7);
    ɵngcc0.ɵɵelementStart(1, "span");
    ɵngcc0.ɵɵtext(2);
    ɵngcc0.ɵɵpipe(3, "number");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r248 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("value", 100 * ctx_r248.systemMetrics["process.cpu.usage"])("striped", true)("animated", false);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate1("", ɵngcc0.ɵɵpipeBind2(3, 4, 100 * ctx_r248.systemMetrics["process.cpu.usage"], "1.0-2"), " %");
} }
function JhiMetricsSystemComponent_div_6_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 2);
    ɵngcc0.ɵɵelementStart(1, "div", 5);
    ɵngcc0.ɵɵtext(2, "System CPU usage");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(3, "div", 6);
    ɵngcc0.ɵɵtext(4);
    ɵngcc0.ɵɵpipe(5, "number");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r249 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(4);
    ɵngcc0.ɵɵtextInterpolate1("", ɵngcc0.ɵɵpipeBind2(5, 1, 100 * ctx_r249.systemMetrics["system.cpu.usage"], "1.0-2"), " %");
} }
function JhiMetricsSystemComponent_ngb_progressbar_7_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "ngb-progressbar", 7);
    ɵngcc0.ɵɵelementStart(1, "span");
    ɵngcc0.ɵɵtext(2);
    ɵngcc0.ɵɵpipe(3, "number");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r250 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("value", 100 * ctx_r250.systemMetrics["system.cpu.usage"])("striped", true)("animated", false);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate1("", ɵngcc0.ɵɵpipeBind2(3, 4, 100 * ctx_r250.systemMetrics["system.cpu.usage"], "1.0-2"), " %");
} }
function JhiMetricsSystemComponent_div_8_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 2);
    ɵngcc0.ɵɵelementStart(1, "div", 5);
    ɵngcc0.ɵɵtext(2, "System CPU count");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(3, "div", 6);
    ɵngcc0.ɵɵtext(4);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r251 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(4);
    ɵngcc0.ɵɵtextInterpolate(ctx_r251.systemMetrics["system.cpu.count"]);
} }
function JhiMetricsSystemComponent_div_9_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 2);
    ɵngcc0.ɵɵelementStart(1, "div", 5);
    ɵngcc0.ɵɵtext(2, "System 1m Load average");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(3, "div", 6);
    ɵngcc0.ɵɵtext(4);
    ɵngcc0.ɵɵpipe(5, "number");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r252 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(4);
    ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind2(5, 1, ctx_r252.systemMetrics["system.load.average.1m"], "1.0-2"));
} }
function JhiMetricsSystemComponent_div_10_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 2);
    ɵngcc0.ɵɵelementStart(1, "div", 5);
    ɵngcc0.ɵɵtext(2, "Process files max");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(3, "div", 6);
    ɵngcc0.ɵɵtext(4);
    ɵngcc0.ɵɵpipe(5, "number");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r253 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(4);
    ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind2(5, 1, ctx_r253.systemMetrics["process.files.max"], "1.0-0"));
} }
function JhiMetricsSystemComponent_div_11_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 2);
    ɵngcc0.ɵɵelementStart(1, "div", 5);
    ɵngcc0.ɵɵtext(2, "Process files open");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(3, "div", 6);
    ɵngcc0.ɵɵtext(4);
    ɵngcc0.ɵɵpipe(5, "number");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r254 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(4);
    ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind2(5, 1, ctx_r254.systemMetrics["process.files.open"], "1.0-0"));
} }
let JhiModuleConfig = class JhiModuleConfig {
    constructor() {
        this.sortIcon = faSort;
        this.sortAscIcon = faSortUp;
        this.sortDescIcon = faSortDown;
        this.i18nEnabled = false;
        this.defaultI18nLang = 'en';
        this.noi18nMessage = 'translation-not-found';
        this.alertAsToast = false;
        this.alertTimeout = 5000;
        this.classBadgeTrue = 'badge badge-success';
        this.classBadgeFalse = 'badge badge-danger';
        this.classTrue = 'fa fa-lg fa-check text-success';
        this.classFalse = 'fa fa-lg fa-times text-danger';
    }
};
JhiModuleConfig.ɵfac = function JhiModuleConfig_Factory(t) { return new (t || JhiModuleConfig)(); };
JhiModuleConfig.ɵprov = ɵɵdefineInjectable({ factory: function JhiModuleConfig_Factory() { return new JhiModuleConfig(); }, token: JhiModuleConfig, providedIn: "root" });

let JhiConfigService = class JhiConfigService {
    constructor(moduleConfig) {
        this.CONFIG_OPTIONS = Object.assign(Object.assign({}, new JhiModuleConfig()), moduleConfig);
    }
    getConfig() {
        return this.CONFIG_OPTIONS;
    }
};
JhiConfigService.ɵfac = function JhiConfigService_Factory(t) { return new (t || JhiConfigService)(ɵngcc0.ɵɵinject(JhiModuleConfig)); };
JhiConfigService.ctorParameters = () => [
    { type: JhiModuleConfig }
];
JhiConfigService.ɵprov = ɵɵdefineInjectable({ factory: function JhiConfigService_Factory() { return new JhiConfigService(ɵɵinject(JhiModuleConfig)); }, token: JhiConfigService, providedIn: "root" });

/**
 * A component that will take care of item count statistics of a pagination.
 */
let JhiItemCountComponent = class JhiItemCountComponent {
    constructor(config) {
        this.i18nEnabled = config.CONFIG_OPTIONS.i18nEnabled;
    }
    /**
     * "translate-values" JSON of the template
     */
    i18nValues() {
        const first = (this.page - 1) * this.itemsPerPage === 0 ? 1 : (this.page - 1) * this.itemsPerPage + 1;
        const second = this.page * this.itemsPerPage < this.total ? this.page * this.itemsPerPage : this.total;
        return {
            first,
            second,
            total: this.total
        };
    }
};
JhiItemCountComponent.ɵfac = function JhiItemCountComponent_Factory(t) { return new (t || JhiItemCountComponent)(ɵngcc0.ɵɵdirectiveInject(JhiConfigService)); };
JhiItemCountComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: JhiItemCountComponent, selectors: [["jhi-item-count"]], inputs: { page: "page", total: "total", itemsPerPage: "itemsPerPage" }, decls: 3, vars: 2, consts: [["class", "info jhi-item-count", "jhiTranslate", "global.item-count", 3, "translateValues", 4, "ngIf", "ngIfElse"], ["class", "info jhi-item-count"], ["noI18n", ""], ["jhiTranslate", "global.item-count", 1, "info", "jhi-item-count", 3, "translateValues"]], template: function JhiItemCountComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵtemplate(0, JhiItemCountComponent_div_0_Template, 2, 1, "div", 0);
        ɵngcc0.ɵɵtemplate(1, JhiItemCountComponent_ng_template_1_Template, 1, 3, "ng-template", 1, 2, ɵngcc0.ɵɵtemplateRefExtractor);
    } if (rf & 2) {
        const _r210 = ɵngcc0.ɵɵreference(2);
        ɵngcc0.ɵɵproperty("ngIf", ctx.i18nEnabled)("ngIfElse", _r210);
    } }, directives: function () { return [ɵngcc1.NgIf, JhiTranslateDirective]; }, encapsulation: 2 });
JhiItemCountComponent.ctorParameters = () => [
    { type: JhiConfigService }
];
__decorate([
    Input()
], JhiItemCountComponent.prototype, "page", void 0);
__decorate([
    Input()
], JhiItemCountComponent.prototype, "total", void 0);
__decorate([
    Input()
], JhiItemCountComponent.prototype, "itemsPerPage", void 0);

/**
 * This component can be used to display a boolean value by defining the @Input attributes
 * If an attribute is not provided, default values will be applied (see JhiModuleConfig class)
 * Have a look at the following examples
 *
 * * * * * * * * * * * * * * * * * * * * * * * * * * * *
 *
 * <jhi-boolean [value]="inputBooleanVariable"></jhi-boolean>
 *
 * - Display a green check when inputBooleanVariable is true
 * - Display a red cross when inputBooleanVariable is false
 *
 * * * * * * * * * * * * * * * * * * * * * * * * * * * *
 *
 * <jhi-boolean
 *     [value]="inputBooleanVariable">
 *     classTrue="fa fa-lg fa-check text-primary"
 *     classFalse="fa fa-lg fa-times text-warning"
 * </jhi-boolean>
 *
 * - Display a blue check when inputBooleanVariable is true
 * - Display an orange cross when inputBooleanVariable is false
 *
 * * * * * * * * * * * * * * * * * * * * * * * * * * * *
 *
 * <jhi-boolean
 *     [value]="inputBooleanVariable">
 *     classTrue="fa fa-lg fa-check"
 *     classFalse=""
 * </jhi-boolean>
 *
 * - Display a black check when inputBooleanVariable is true
 * - Do not display anything when inputBooleanVariable is false
 *
 * * * * * * * * * * * * * * * * * * * * * * * * * * * *
 *
 * <jhi-boolean
 *     [value]="inputBooleanVariable"
 *     [textTrue]="'userManagement.activated' | translate"
 *     textFalse="deactivated">
 * </jhi-boolean>
 *
 * - Display a green badge when inputBooleanVariable is true
 * - Display a red badge when inputBooleanVariable is false
 *
 * * * * * * * * * * * * * * * * * * * * * * * * * * * *
 *
 * <jhi-boolean
 *     [value]="user.activated"
 *     classTrue="badge badge-warning"
 *     classFalse="badge badge-info"
 *     [textTrue]="'userManagement.activated' | translate"
 *     textFalse="deactivated">
 * </jhi-boolean>
 *
 * - Display an orange badge and write 'activated' when inputBooleanVariable is true
 * - Display a blue badge and write 'deactivated' when inputBooleanVariable is false
 */
let JhiBooleanComponent = class JhiBooleanComponent {
    constructor(configService) {
        this.config = configService.getConfig();
    }
    ngOnInit() {
        if (this.textTrue === undefined) {
            if (this.classTrue === undefined) {
                this.classTrue = this.config.classTrue;
            }
        }
        else {
            if (this.classTrue === undefined) {
                this.classTrue = this.config.classBadgeTrue;
            }
        }
        if (this.textFalse === undefined) {
            if (this.classFalse === undefined) {
                this.classFalse = this.config.classFalse;
            }
        }
        else {
            if (this.classFalse === undefined) {
                this.classFalse = this.config.classBadgeFalse;
            }
        }
    }
};
JhiBooleanComponent.ɵfac = function JhiBooleanComponent_Factory(t) { return new (t || JhiBooleanComponent)(ɵngcc0.ɵɵdirectiveInject(JhiConfigService)); };
JhiBooleanComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: JhiBooleanComponent, selectors: [["jhi-boolean"]], inputs: { classTrue: "classTrue", classFalse: "classFalse", value: "value", textTrue: "textTrue", textFalse: "textFalse" }, decls: 1, vars: 2, consts: [[3, "ngClass", "innerHtml"]], template: function JhiBooleanComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelement(0, "span", 0);
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("ngClass", ctx.value ? ctx.classTrue : ctx.classFalse)("innerHtml", ctx.value ? ctx.textTrue : ctx.textFalse, ɵngcc0.ɵɵsanitizeHtml);
    } }, directives: [ɵngcc1.NgClass], encapsulation: 2 });
JhiBooleanComponent.ctorParameters = () => [
    { type: JhiConfigService }
];
__decorate([
    Input()
], JhiBooleanComponent.prototype, "value", void 0);
__decorate([
    Input()
], JhiBooleanComponent.prototype, "classTrue", void 0);
__decorate([
    Input()
], JhiBooleanComponent.prototype, "classFalse", void 0);
__decorate([
    Input()
], JhiBooleanComponent.prototype, "textTrue", void 0);
__decorate([
    Input()
], JhiBooleanComponent.prototype, "textFalse", void 0);

/*
 Copyright 2013-2020 the original author or authors from the JHipster project.

 This file is part of the JHipster project, see https://www.jhipster.tech/
 for more information.

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

 http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
 */

/*
 Copyright 2013-2020 the original author or authors from the JHipster project.

 This file is part of the JHipster project, see https://www.jhipster.tech/
 for more information.

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

 http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
 */
function numberOfBytes(base64String) {
    function endsWith(suffix, str) {
        return str.includes(suffix, str.length - suffix.length);
    }
    function paddingSize(value) {
        if (endsWith('==', value)) {
            return 2;
        }
        if (endsWith('=', value)) {
            return 1;
        }
        return 0;
    }
    return (base64String.length / 4) * 3 - paddingSize(base64String);
}

var JhiMaxbytesValidatorDirective_1;
let JhiMaxbytesValidatorDirective = JhiMaxbytesValidatorDirective_1 = class JhiMaxbytesValidatorDirective {
    constructor() { }
    validate(c) {
        return c.value && numberOfBytes(c.value) > this.jhiMaxbytes
            ? {
                maxbytes: {
                    valid: false
                }
            }
            : null;
    }
};
JhiMaxbytesValidatorDirective.ɵfac = function JhiMaxbytesValidatorDirective_Factory(t) { return new (t || JhiMaxbytesValidatorDirective)(); };
JhiMaxbytesValidatorDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: JhiMaxbytesValidatorDirective, selectors: [["", "jhiMaxbytes", "", "ngModel", ""]], inputs: { jhiMaxbytes: "jhiMaxbytes" }, features: [ɵngcc0.ɵɵProvidersFeature([{ provide: NG_VALIDATORS, useExisting: forwardRef(() => JhiMaxbytesValidatorDirective_1), multi: true }])] });
__decorate([
    Input()
], JhiMaxbytesValidatorDirective.prototype, "jhiMaxbytes", void 0);

var JhiMinbytesValidatorDirective_1;
let JhiMinbytesValidatorDirective = JhiMinbytesValidatorDirective_1 = class JhiMinbytesValidatorDirective {
    constructor() { }
    validate(c) {
        return c.value && numberOfBytes(c.value) < this.jhiMinbytes
            ? {
                minbytes: {
                    valid: false
                }
            }
            : null;
    }
};
JhiMinbytesValidatorDirective.ɵfac = function JhiMinbytesValidatorDirective_Factory(t) { return new (t || JhiMinbytesValidatorDirective)(); };
JhiMinbytesValidatorDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: JhiMinbytesValidatorDirective, selectors: [["", "jhiMinbytes", "", "ngModel", ""]], inputs: { jhiMinbytes: "jhiMinbytes" }, features: [ɵngcc0.ɵɵProvidersFeature([{ provide: NG_VALIDATORS, useExisting: forwardRef(() => JhiMinbytesValidatorDirective_1), multi: true }])] });
__decorate([
    Input()
], JhiMinbytesValidatorDirective.prototype, "jhiMinbytes", void 0);

var JhiMaxValidatorDirective_1;
let JhiMaxValidatorDirective = JhiMaxValidatorDirective_1 = class JhiMaxValidatorDirective {
    constructor() { }
    validate(c) {
        return c.value === undefined || c.value === null || c.value <= this.jhiMax
            ? null
            : {
                max: {
                    valid: false
                }
            };
    }
};
JhiMaxValidatorDirective.ɵfac = function JhiMaxValidatorDirective_Factory(t) { return new (t || JhiMaxValidatorDirective)(); };
JhiMaxValidatorDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: JhiMaxValidatorDirective, selectors: [["", "jhiMax", "", "ngModel", ""]], inputs: { jhiMax: "jhiMax" }, features: [ɵngcc0.ɵɵProvidersFeature([{ provide: NG_VALIDATORS, useExisting: forwardRef(() => JhiMaxValidatorDirective_1), multi: true }])] });
__decorate([
    Input()
], JhiMaxValidatorDirective.prototype, "jhiMax", void 0);

var JhiMinValidatorDirective_1;
let JhiMinValidatorDirective = JhiMinValidatorDirective_1 = class JhiMinValidatorDirective {
    constructor() { }
    validate(c) {
        return c.value === undefined || c.value === null || c.value >= this.jhiMin
            ? null
            : {
                min: {
                    valid: false
                }
            };
    }
};
JhiMinValidatorDirective.ɵfac = function JhiMinValidatorDirective_Factory(t) { return new (t || JhiMinValidatorDirective)(); };
JhiMinValidatorDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: JhiMinValidatorDirective, selectors: [["", "jhiMin", "", "ngModel", ""]], inputs: { jhiMin: "jhiMin" }, features: [ɵngcc0.ɵɵProvidersFeature([{ provide: NG_VALIDATORS, useExisting: forwardRef(() => JhiMinValidatorDirective_1), multi: true }])] });
__decorate([
    Input()
], JhiMinValidatorDirective.prototype, "jhiMin", void 0);

let JhiSortDirective = class JhiSortDirective {
    constructor() {
        this.predicateChange = new EventEmitter();
        this.ascendingChange = new EventEmitter();
    }
    sort(field) {
        this.ascending = field !== this.predicate ? true : !this.ascending;
        this.predicate = field;
        this.predicateChange.emit(field);
        this.ascendingChange.emit(this.ascending);
        this.callback();
    }
};
JhiSortDirective.ɵfac = function JhiSortDirective_Factory(t) { return new (t || JhiSortDirective)(); };
JhiSortDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: JhiSortDirective, selectors: [["", "jhiSort", ""]], inputs: { ascending: "ascending", predicate: "predicate", callback: "callback" }, outputs: { predicateChange: "predicateChange", ascendingChange: "ascendingChange" } });
__decorate([
    Input()
], JhiSortDirective.prototype, "predicate", void 0);
__decorate([
    Input()
], JhiSortDirective.prototype, "ascending", void 0);
__decorate([
    Input()
], JhiSortDirective.prototype, "callback", void 0);
__decorate([
    Output()
], JhiSortDirective.prototype, "predicateChange", void 0);
__decorate([
    Output()
], JhiSortDirective.prototype, "ascendingChange", void 0);

let JhiSortByDirective = class JhiSortByDirective {
    constructor(jhiSort, configService) {
        this.jhiSort = jhiSort;
        this.jhiSort = jhiSort;
        const config = configService.getConfig();
        this.sortIcon = config.sortIcon;
        this.sortAscIcon = config.sortAscIcon;
        this.sortDescIcon = config.sortDescIcon;
    }
    ngAfterContentInit() {
        if (this.jhiSort.predicate && this.jhiSort.predicate !== '_score' && this.jhiSort.predicate === this.jhiSortBy) {
            this.updateIconDefinition(this.iconComponent, this.jhiSort.ascending ? this.sortAscIcon : this.sortDescIcon);
            this.jhiSort.activeIconComponent = this.iconComponent;
        }
    }
    onClick() {
        if (this.jhiSort.predicate && this.jhiSort.predicate !== '_score') {
            this.jhiSort.sort(this.jhiSortBy);
            this.updateIconDefinition(this.jhiSort.activeIconComponent, this.sortIcon);
            this.updateIconDefinition(this.iconComponent, this.jhiSort.ascending ? this.sortAscIcon : this.sortDescIcon);
            this.jhiSort.activeIconComponent = this.iconComponent;
        }
    }
    updateIconDefinition(iconComponent, icon) {
        if (iconComponent) {
            iconComponent.iconProp = icon;
            iconComponent.ngOnChanges({});
        }
    }
};
JhiSortByDirective.ɵfac = function JhiSortByDirective_Factory(t) { return new (t || JhiSortByDirective)(ɵngcc0.ɵɵdirectiveInject(JhiSortDirective, 1), ɵngcc0.ɵɵdirectiveInject(JhiConfigService)); };
JhiSortByDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: JhiSortByDirective, selectors: [["", "jhiSortBy", ""]], contentQueries: function JhiSortByDirective_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {
        ɵngcc0.ɵɵstaticContentQuery(dirIndex, FaIconComponent, true);
    } if (rf & 2) {
        var _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.iconComponent = _t.first);
    } }, hostBindings: function JhiSortByDirective_HostBindings(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵlistener("click", function JhiSortByDirective_click_HostBindingHandler() { return ctx.onClick(); });
    } }, inputs: { jhiSortBy: "jhiSortBy" } });
JhiSortByDirective.ctorParameters = () => [
    { type: JhiSortDirective, decorators: [{ type: Host }] },
    { type: JhiConfigService }
];
__decorate([
    Input()
], JhiSortByDirective.prototype, "jhiSortBy", void 0);
__decorate([
    ContentChild(FaIconComponent, { static: true })
], JhiSortByDirective.prototype, "iconComponent", void 0);
__decorate([
    HostListener('click')
], JhiSortByDirective.prototype, "onClick", null);
JhiSortByDirective = __decorate([ __param(0, Host())
], JhiSortByDirective);

/*
 Copyright 2013-2020 the original author or authors from the JHipster project.

 This file is part of the JHipster project, see https://www.jhipster.tech/
 for more information.

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

 http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
 */

let JhiLanguageService = class JhiLanguageService {
    constructor(translateService, configService) {
        this.translateService = translateService;
        this.configService = configService;
        this.currentLang = 'en';
    }
    init() {
        const config = this.configService.getConfig();
        this.currentLang = config.defaultI18nLang;
        this.translateService.setDefaultLang(this.currentLang);
        this.translateService.use(this.currentLang);
    }
    changeLanguage(languageKey) {
        this.currentLang = languageKey;
        this.configService.CONFIG_OPTIONS.defaultI18nLang = languageKey;
        this.translateService.use(this.currentLang);
    }
    /**
     * @deprecated Will be removed when releasing generator-jhipster v7
     */
    getCurrent() {
        return Promise.resolve(this.currentLang);
    }
    getCurrentLanguage() {
        return this.currentLang;
    }
};
JhiLanguageService.ɵfac = function JhiLanguageService_Factory(t) { return new (t || JhiLanguageService)(ɵngcc0.ɵɵinject(ɵngcc2.TranslateService), ɵngcc0.ɵɵinject(JhiConfigService)); };
JhiLanguageService.ctorParameters = () => [
    { type: TranslateService },
    { type: JhiConfigService }
];
JhiLanguageService.ɵprov = ɵɵdefineInjectable({ factory: function JhiLanguageService_Factory() { return new JhiLanguageService(ɵɵinject(TranslateService), ɵɵinject(JhiConfigService)); }, token: JhiLanguageService, providedIn: "root" });

/**
 * A wrapper directive on top of the translate pipe as the inbuilt translate directive from ngx-translate is too verbose and buggy
 */
let JhiTranslateDirective = class JhiTranslateDirective {
    constructor(configService, el, translateService) {
        this.configService = configService;
        this.el = el;
        this.translateService = translateService;
        this.directiveDestroyed = new Subject();
    }
    ngOnInit() {
        const enabled = this.configService.getConfig().i18nEnabled;
        if (enabled) {
            this.translateService.onLangChange.pipe(takeUntil(this.directiveDestroyed)).subscribe(() => {
                this.getTranslation();
            });
        }
    }
    ngOnChanges() {
        const enabled = this.configService.getConfig().i18nEnabled;
        if (enabled) {
            this.getTranslation();
        }
    }
    ngOnDestroy() {
        this.directiveDestroyed.next();
        this.directiveDestroyed.complete();
    }
    getTranslation() {
        this.translateService
            .get(this.jhiTranslate, this.translateValues)
            .pipe(takeUntil(this.directiveDestroyed))
            .subscribe(value => {
            this.el.nativeElement.innerHTML = value;
        }, () => {
            return `${this.configService.getConfig().noi18nMessage}[${this.jhiTranslate}]`;
        });
    }
};
JhiTranslateDirective.ɵfac = function JhiTranslateDirective_Factory(t) { return new (t || JhiTranslateDirective)(ɵngcc0.ɵɵdirectiveInject(JhiConfigService), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.TranslateService, 8)); };
JhiTranslateDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: JhiTranslateDirective, selectors: [["", "jhiTranslate", ""]], inputs: { jhiTranslate: "jhiTranslate", translateValues: "translateValues" }, features: [ɵngcc0.ɵɵNgOnChangesFeature()] });
JhiTranslateDirective.ctorParameters = () => [
    { type: JhiConfigService },
    { type: ElementRef },
    { type: TranslateService, decorators: [{ type: Optional }] }
];
__decorate([
    Input()
], JhiTranslateDirective.prototype, "jhiTranslate", void 0);
__decorate([
    Input()
], JhiTranslateDirective.prototype, "translateValues", void 0);
JhiTranslateDirective = __decorate([ __param(2, Optional())
], JhiTranslateDirective);

class JhiMissingTranslationHandler {
    constructor(configService) {
        this.configService = configService;
    }
    handle(params) {
        const key = params.key;
        return `${this.configService.getConfig().noi18nMessage}[${key}]`;
    }
}

/*
 Copyright 2013-2020 the original author or authors from the JHipster project.

 This file is part of the JHipster project, see https://www.jhipster.tech/
 for more information.

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

 http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
 */

let JhiThreadModalComponent = class JhiThreadModalComponent {
    constructor(activeModal) {
        this.activeModal = activeModal;
        this.threadDumpAll = 0;
        this.threadDumpBlocked = 0;
        this.threadDumpRunnable = 0;
        this.threadDumpTimedWaiting = 0;
        this.threadDumpWaiting = 0;
    }
    ngOnInit() {
        this.threadDump.forEach(value => {
            if (value.threadState === 'RUNNABLE') {
                this.threadDumpRunnable += 1;
            }
            else if (value.threadState === 'WAITING') {
                this.threadDumpWaiting += 1;
            }
            else if (value.threadState === 'TIMED_WAITING') {
                this.threadDumpTimedWaiting += 1;
            }
            else if (value.threadState === 'BLOCKED') {
                this.threadDumpBlocked += 1;
            }
        });
        this.threadDumpAll = this.threadDumpRunnable + this.threadDumpWaiting + this.threadDumpTimedWaiting + this.threadDumpBlocked;
    }
    getBadgeClass(threadState) {
        if (threadState === 'RUNNABLE') {
            return 'badge-success';
        }
        else if (threadState === 'WAITING') {
            return 'badge-info';
        }
        else if (threadState === 'TIMED_WAITING') {
            return 'badge-warning';
        }
        else if (threadState === 'BLOCKED') {
            return 'badge-danger';
        }
    }
};
JhiThreadModalComponent.ɵfac = function JhiThreadModalComponent_Factory(t) { return new (t || JhiThreadModalComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc3.NgbActiveModal)); };
JhiThreadModalComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: JhiThreadModalComponent, selectors: [["jhi-thread-modal"]], decls: 41, vars: 13, consts: [[1, "modal-header"], ["jhiTranslate", "metrics.jvm.threads.dump.title", 1, "modal-title"], ["type", "button", 1, "close", 3, "click"], [1, "modal-body"], [1, "badge", "badge-primary", 3, "click"], [1, "badge", "badge-pill", "badge-default"], [1, "badge", "badge-success", 3, "click"], [1, "badge", "badge-info", 3, "click"], [1, "badge", "badge-warning", 3, "click"], [1, "badge", "badge-danger", 3, "click"], [1, "mt-2"], ["type", "text", 1, "form-control", 3, "ngModel", "ngModelChange"], ["class", "pad", 4, "ngFor", "ngForOf"], [1, "modal-footer"], ["type", "button", "data-dismiss", "modal", 1, "btn", "btn-secondary", "float-left", 3, "click"], [1, "pad"], [1, "badge", 3, "ngClass"], ["href", "javascript:void(0);", 3, "click"], ["jhiTranslate", "metrics.jvm.threads.dump.show", 3, "hidden"], ["jhiTranslate", "metrics.jvm.threads.dump.hide", 3, "hidden"], [1, "card", 3, "hidden"], [1, "card-body"], ["class", "break", 4, "ngFor", "ngForOf"], [1, "table", "table-sm", "table-responsive"], ["jhiTranslate", "metrics.jvm.threads.dump.blockedtime"], ["jhiTranslate", "metrics.jvm.threads.dump.blockedcount"], ["jhiTranslate", "metrics.jvm.threads.dump.waitedtime"], ["jhiTranslate", "metrics.jvm.threads.dump.waitedcount"], ["jhiTranslate", "metrics.jvm.threads.dump.lockname"], [1, "thread-dump-modal-lock", 3, "title"], [1, "break"], [1, "mt-1"]], template: function JhiThreadModalComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "div", 0);
        ɵngcc0.ɵɵelementStart(1, "h4", 1);
        ɵngcc0.ɵɵtext(2, "Threads dump");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(3, "button", 2);
        ɵngcc0.ɵɵlistener("click", function JhiThreadModalComponent_Template_button_click_3_listener() { return ctx.activeModal.dismiss("closed"); });
        ɵngcc0.ɵɵtext(4, "\u00D7");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(5, "div", 3);
        ɵngcc0.ɵɵelementStart(6, "span", 4);
        ɵngcc0.ɵɵlistener("click", function JhiThreadModalComponent_Template_span_click_6_listener() { return ctx.threadDumpFilter = {}; });
        ɵngcc0.ɵɵtext(7, " All\u00A0");
        ɵngcc0.ɵɵelementStart(8, "span", 5);
        ɵngcc0.ɵɵtext(9);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtext(10, "\u00A0 ");
        ɵngcc0.ɵɵelementStart(11, "span", 6);
        ɵngcc0.ɵɵlistener("click", function JhiThreadModalComponent_Template_span_click_11_listener() { return ctx.threadDumpFilter = { threadState: "RUNNABLE" }; });
        ɵngcc0.ɵɵtext(12, " Runnable\u00A0");
        ɵngcc0.ɵɵelementStart(13, "span", 5);
        ɵngcc0.ɵɵtext(14);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtext(15, "\u00A0 ");
        ɵngcc0.ɵɵelementStart(16, "span", 7);
        ɵngcc0.ɵɵlistener("click", function JhiThreadModalComponent_Template_span_click_16_listener() { return ctx.threadDumpFilter = { threadState: "WAITING" }; });
        ɵngcc0.ɵɵtext(17, "Waiting\u00A0");
        ɵngcc0.ɵɵelementStart(18, "span", 5);
        ɵngcc0.ɵɵtext(19);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtext(20, "\u00A0 ");
        ɵngcc0.ɵɵelementStart(21, "span", 8);
        ɵngcc0.ɵɵlistener("click", function JhiThreadModalComponent_Template_span_click_21_listener() { return ctx.threadDumpFilter = { threadState: "TIMED_WAITING" }; });
        ɵngcc0.ɵɵtext(22, " Timed Waiting\u00A0");
        ɵngcc0.ɵɵelementStart(23, "span", 5);
        ɵngcc0.ɵɵtext(24);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtext(25, "\u00A0 ");
        ɵngcc0.ɵɵelementStart(26, "span", 9);
        ɵngcc0.ɵɵlistener("click", function JhiThreadModalComponent_Template_span_click_26_listener() { return ctx.threadDumpFilter = { threadState: "BLOCKED" }; });
        ɵngcc0.ɵɵtext(27, "Blocked\u00A0");
        ɵngcc0.ɵɵelementStart(28, "span", 5);
        ɵngcc0.ɵɵtext(29);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtext(30, "\u00A0 ");
        ɵngcc0.ɵɵelementStart(31, "div", 10);
        ɵngcc0.ɵɵtext(32, "\u00A0");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtext(33, " Filter ");
        ɵngcc0.ɵɵelementStart(34, "input", 11);
        ɵngcc0.ɵɵlistener("ngModelChange", function JhiThreadModalComponent_Template_input_ngModelChange_34_listener($event) { return ctx.threadDumpFilter = $event; });
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtemplate(35, JhiThreadModalComponent_div_35_Template, 40, 16, "div", 12);
        ɵngcc0.ɵɵpipe(36, "keys");
        ɵngcc0.ɵɵpipe(37, "pureFilter");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(38, "div", 13);
        ɵngcc0.ɵɵelementStart(39, "button", 14);
        ɵngcc0.ɵɵlistener("click", function JhiThreadModalComponent_Template_button_click_39_listener() { return ctx.activeModal.dismiss("closed"); });
        ɵngcc0.ɵɵtext(40, " Done ");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(9);
        ɵngcc0.ɵɵtextInterpolate(ctx.threadDumpAll);
        ɵngcc0.ɵɵadvance(5);
        ɵngcc0.ɵɵtextInterpolate(ctx.threadDumpRunnable);
        ɵngcc0.ɵɵadvance(5);
        ɵngcc0.ɵɵtextInterpolate(ctx.threadDumpWaiting);
        ɵngcc0.ɵɵadvance(5);
        ɵngcc0.ɵɵtextInterpolate(ctx.threadDumpTimedWaiting);
        ɵngcc0.ɵɵadvance(5);
        ɵngcc0.ɵɵtextInterpolate(ctx.threadDumpBlocked);
        ɵngcc0.ɵɵadvance(5);
        ɵngcc0.ɵɵproperty("ngModel", ctx.threadDumpFilter);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngForOf", ɵngcc0.ɵɵpipeBind1(36, 7, ɵngcc0.ɵɵpipeBind3(37, 9, ctx.threadDump, ctx.threadDumpFilter, "lockName")));
    } }, directives: function () { return [JhiTranslateDirective, ɵngcc4.DefaultValueAccessor, ɵngcc4.NgControlStatus, ɵngcc4.NgModel, ɵngcc1.NgForOf, ɵngcc1.NgClass]; }, pipes: function () { return [JhiKeysPipe,
        JhiPureFilterPipe]; }, encapsulation: 2 });
JhiThreadModalComponent.ctorParameters = () => [
    { type: NgbActiveModal }
];

let JhiJvmMemoryComponent = class JhiJvmMemoryComponent {
};
JhiJvmMemoryComponent.ɵfac = function JhiJvmMemoryComponent_Factory(t) { return new (t || JhiJvmMemoryComponent)(); };
JhiJvmMemoryComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: JhiJvmMemoryComponent, selectors: [["jhi-jvm-memory"]], inputs: { jvmMemoryMetrics: "jvmMemoryMetrics", updating: "updating" }, decls: 3, vars: 1, consts: [["jhiTranslate", "metrics.jvm.memory.title"], [4, "ngIf"], [4, "ngFor", "ngForOf"], [4, "ngIf", "ngIfElse"], ["other", ""], ["type", "success", 3, "value", "striped", "animated", 4, "ngIf"], ["type", "success", 3, "value", "striped", "animated"]], template: function JhiJvmMemoryComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "h4", 0);
        ɵngcc0.ɵɵtext(1, "Memory");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtemplate(2, JhiJvmMemoryComponent_div_2_Template, 3, 3, "div", 1);
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("ngIf", !ctx.updating);
    } }, directives: function () { return [JhiTranslateDirective, ɵngcc1.NgIf, ɵngcc1.NgForOf, ɵngcc3.NgbProgressbar]; }, pipes: function () { return [JhiKeysPipe, ɵngcc1.DecimalPipe]; }, encapsulation: 2 });
__decorate([
    Input()
], JhiJvmMemoryComponent.prototype, "jvmMemoryMetrics", void 0);
__decorate([
    Input()
], JhiJvmMemoryComponent.prototype, "updating", void 0);

let JhiJvmThreadsComponent = class JhiJvmThreadsComponent {
    constructor(modalService) {
        this.modalService = modalService;
    }
    ngOnInit() {
        this.threadStats = {
            threadDumpRunnable: 0,
            threadDumpWaiting: 0,
            threadDumpTimedWaiting: 0,
            threadDumpBlocked: 0,
            threadDumpAll: 0
        };
        this.threadData.forEach(value => {
            if (value.threadState === 'RUNNABLE') {
                this.threadStats.threadDumpRunnable += 1;
            }
            else if (value.threadState === 'WAITING') {
                this.threadStats.threadDumpWaiting += 1;
            }
            else if (value.threadState === 'TIMED_WAITING') {
                this.threadStats.threadDumpTimedWaiting += 1;
            }
            else if (value.threadState === 'BLOCKED') {
                this.threadStats.threadDumpBlocked += 1;
            }
        });
        this.threadStats.threadDumpAll =
            this.threadStats.threadDumpRunnable +
                this.threadStats.threadDumpWaiting +
                this.threadStats.threadDumpTimedWaiting +
                this.threadStats.threadDumpBlocked;
    }
    open() {
        const modalRef = this.modalService.open(JhiThreadModalComponent);
        modalRef.componentInstance.threadDump = this.threadData;
    }
};
JhiJvmThreadsComponent.ɵfac = function JhiJvmThreadsComponent_Factory(t) { return new (t || JhiJvmThreadsComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc3.NgbModal)); };
JhiJvmThreadsComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: JhiJvmThreadsComponent, selectors: [["jhi-jvm-threads"]], inputs: { threadData: "threadData" }, decls: 39, vars: 37, consts: [["jhiTranslate", "metrics.jvm.threads.title"], ["jhiTranslate", "metrics.jvm.threads.runnable"], ["type", "success", 3, "value", "max", "striped", "animated"], ["jhiTranslate", "metrics.jvm.threads.timedwaiting"], ["type", "warning", 3, "value", "max", "striped", "animated"], ["jhiTranslate", "metrics.jvm.threads.waiting"], ["jhiTranslate", "metrics.jvm.threads.blocked"], ["data-toggle", "modal", "data-target", "#threadDump", 1, "hand", "btn", "btn-primary", "btn-sm", 3, "click"]], template: function JhiJvmThreadsComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "h4", 0);
        ɵngcc0.ɵɵtext(1, "Threads");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(2, "span");
        ɵngcc0.ɵɵelementStart(3, "span", 1);
        ɵngcc0.ɵɵtext(4, "Runnable");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtext(5);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(6, "ngb-progressbar", 2);
        ɵngcc0.ɵɵelementStart(7, "span");
        ɵngcc0.ɵɵtext(8);
        ɵngcc0.ɵɵpipe(9, "number");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(10, "span");
        ɵngcc0.ɵɵelementStart(11, "span", 3);
        ɵngcc0.ɵɵtext(12, "Timed Waiting");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtext(13);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(14, "ngb-progressbar", 4);
        ɵngcc0.ɵɵelementStart(15, "span");
        ɵngcc0.ɵɵtext(16);
        ɵngcc0.ɵɵpipe(17, "number");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(18, "span");
        ɵngcc0.ɵɵelementStart(19, "span", 5);
        ɵngcc0.ɵɵtext(20, "Waiting");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtext(21);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(22, "ngb-progressbar", 4);
        ɵngcc0.ɵɵelementStart(23, "span");
        ɵngcc0.ɵɵtext(24);
        ɵngcc0.ɵɵpipe(25, "number");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(26, "span");
        ɵngcc0.ɵɵelementStart(27, "span", 6);
        ɵngcc0.ɵɵtext(28, "Blocked");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtext(29);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(30, "ngb-progressbar", 2);
        ɵngcc0.ɵɵelementStart(31, "span");
        ɵngcc0.ɵɵtext(32);
        ɵngcc0.ɵɵpipe(33, "number");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(34, "div");
        ɵngcc0.ɵɵtext(35);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(36, "button", 7);
        ɵngcc0.ɵɵlistener("click", function JhiJvmThreadsComponent_Template_button_click_36_listener() { return ctx.open(); });
        ɵngcc0.ɵɵelementStart(37, "span");
        ɵngcc0.ɵɵtext(38, "Expand");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(5);
        ɵngcc0.ɵɵtextInterpolate1(" ", ctx.threadStats.threadDumpRunnable, "");
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("value", ctx.threadStats.threadDumpRunnable)("max", ctx.threadStats.threadDumpAll)("striped", true)("animated", false);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵtextInterpolate1("", ɵngcc0.ɵɵpipeBind2(9, 25, ctx.threadStats.threadDumpRunnable * 100 / ctx.threadStats.threadDumpAll, "1.0-0"), "%");
        ɵngcc0.ɵɵadvance(5);
        ɵngcc0.ɵɵtextInterpolate1(" (", ctx.threadStats.threadDumpTimedWaiting, ")");
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("value", ctx.threadStats.threadDumpTimedWaiting)("max", ctx.threadStats.threadDumpAll)("striped", true)("animated", false);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵtextInterpolate1("", ɵngcc0.ɵɵpipeBind2(17, 28, ctx.threadStats.threadDumpTimedWaiting * 100 / ctx.threadStats.threadDumpAll, "1.0-0"), "%");
        ɵngcc0.ɵɵadvance(5);
        ɵngcc0.ɵɵtextInterpolate1(" (", ctx.threadStats.threadDumpWaiting, ")");
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("value", ctx.threadStats.threadDumpWaiting)("max", ctx.threadStats.threadDumpAll)("striped", true)("animated", false);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵtextInterpolate1("", ɵngcc0.ɵɵpipeBind2(25, 31, ctx.threadStats.threadDumpWaiting * 100 / ctx.threadStats.threadDumpAll, "1.0-0"), "%");
        ɵngcc0.ɵɵadvance(5);
        ɵngcc0.ɵɵtextInterpolate1(" (", ctx.threadStats.threadDumpBlocked, ")");
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("value", ctx.threadStats.threadDumpBlocked)("max", ctx.threadStats.threadDumpAll)("striped", true)("animated", false);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵtextInterpolate1("", ɵngcc0.ɵɵpipeBind2(33, 34, ctx.threadStats.threadDumpBlocked * 100 / ctx.threadStats.threadDumpAll, "1.0-0"), "%");
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵtextInterpolate1("Total: ", ctx.threadStats.threadDumpAll, "");
    } }, directives: [JhiTranslateDirective, ɵngcc3.NgbProgressbar], pipes: [ɵngcc1.DecimalPipe], encapsulation: 2 });
JhiJvmThreadsComponent.ctorParameters = () => [
    { type: NgbModal }
];
__decorate([
    Input()
], JhiJvmThreadsComponent.prototype, "threadData", void 0);

let JhiMetricsCacheComponent = class JhiMetricsCacheComponent {
    filterNaN(input) {
        if (isNaN(input)) {
            return 0;
        }
        return input;
    }
};
JhiMetricsCacheComponent.ɵfac = function JhiMetricsCacheComponent_Factory(t) { return new (t || JhiMetricsCacheComponent)(); };
JhiMetricsCacheComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: JhiMetricsCacheComponent, selectors: [["jhi-metrics-cache"]], inputs: { cacheMetrics: "cacheMetrics", updating: "updating" }, decls: 3, vars: 1, consts: [["jhiTranslate", "metrics.cache.title"], ["class", "table-responsive", 4, "ngIf"], [1, "table-responsive"], [1, "table", "table-striped"], ["jhiTranslate", "metrics.cache.cachename"], ["data-translate", "metrics.cache.hits", 1, "text-right"], ["data-translate", "metrics.cache.misses", 1, "text-right"], ["data-translate", "metrics.cache.gets", 1, "text-right"], ["data-translate", "metrics.cache.puts", 1, "text-right"], ["data-translate", "metrics.cache.removals", 1, "text-right"], ["data-translate", "metrics.cache.evictions", 1, "text-right"], ["data-translate", "metrics.cache.hitPercent", 1, "text-right"], ["data-translate", "metrics.cache.missPercent", 1, "text-right"], [4, "ngFor", "ngForOf"], [1, "text-right"]], template: function JhiMetricsCacheComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "h3", 0);
        ɵngcc0.ɵɵtext(1, "Cache statistics");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtemplate(2, JhiMetricsCacheComponent_div_2_Template, 25, 3, "div", 1);
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("ngIf", !ctx.updating);
    } }, directives: function () { return [JhiTranslateDirective, ɵngcc1.NgIf, ɵngcc1.NgForOf]; }, pipes: function () { return [JhiKeysPipe, ɵngcc1.DecimalPipe]; }, encapsulation: 2 });
__decorate([
    Input()
], JhiMetricsCacheComponent.prototype, "cacheMetrics", void 0);
__decorate([
    Input()
], JhiMetricsCacheComponent.prototype, "updating", void 0);

let JhiMetricsDatasourceComponent = class JhiMetricsDatasourceComponent {
    filterNaN(input) {
        if (isNaN(input)) {
            return 0;
        }
        return input;
    }
};
JhiMetricsDatasourceComponent.ɵfac = function JhiMetricsDatasourceComponent_Factory(t) { return new (t || JhiMetricsDatasourceComponent)(); };
JhiMetricsDatasourceComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: JhiMetricsDatasourceComponent, selectors: [["jhi-metrics-datasource"]], inputs: { datasourceMetrics: "datasourceMetrics", updating: "updating" }, decls: 3, vars: 1, consts: [["jhiTranslate", "metrics.datasource.title"], ["class", "table-responsive", 4, "ngIf"], [1, "table-responsive"], [1, "table", "table-striped"], ["jhiTranslate", "metrics.datasource.usage"], ["jhiTranslate", "metrics.datasource.count", 1, "text-right"], ["jhiTranslate", "metrics.datasource.mean", 1, "text-right"], ["jhiTranslate", "metrics.servicesstats.table.min", 1, "text-right"], ["jhiTranslate", "metrics.servicesstats.table.p50", 1, "text-right"], ["jhiTranslate", "metrics.servicesstats.table.p75", 1, "text-right"], ["jhiTranslate", "metrics.servicesstats.table.p95", 1, "text-right"], ["jhiTranslate", "metrics.servicesstats.table.p99", 1, "text-right"], ["jhiTranslate", "metrics.datasource.max", 1, "text-right"], [1, "text-right"]], template: function JhiMetricsDatasourceComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "h3", 0);
        ɵngcc0.ɵɵtext(1, "DataSource statistics (time in millisecond)");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtemplate(2, JhiMetricsDatasourceComponent_div_2_Template, 103, 91, "div", 1);
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("ngIf", !ctx.updating);
    } }, directives: [JhiTranslateDirective, ɵngcc1.NgIf], pipes: [ɵngcc1.DecimalPipe], encapsulation: 2 });
__decorate([
    Input()
], JhiMetricsDatasourceComponent.prototype, "datasourceMetrics", void 0);
__decorate([
    Input()
], JhiMetricsDatasourceComponent.prototype, "updating", void 0);

let JhiMetricsEndpointsRequestsComponent = class JhiMetricsEndpointsRequestsComponent {
};
JhiMetricsEndpointsRequestsComponent.ɵfac = function JhiMetricsEndpointsRequestsComponent_Factory(t) { return new (t || JhiMetricsEndpointsRequestsComponent)(); };
JhiMetricsEndpointsRequestsComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: JhiMetricsEndpointsRequestsComponent, selectors: [["jhi-metrics-endpoints-requests"]], inputs: { endpointsRequestsMetrics: "endpointsRequestsMetrics", updating: "updating" }, decls: 3, vars: 1, consts: [["class", "table-responsive", 4, "ngIf"], [1, "table-responsive"], [1, "table", "table-striped"], [1, "text-right"], [4, "ngFor", "ngForOf"]], template: function JhiMetricsEndpointsRequestsComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "h3");
        ɵngcc0.ɵɵtext(1, "Endpoints requests (time in millisecond)");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtemplate(2, JhiMetricsEndpointsRequestsComponent_div_2_Template, 15, 3, "div", 0);
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("ngIf", !ctx.updating);
    } }, directives: function () { return [ɵngcc1.NgIf, ɵngcc1.NgForOf]; }, pipes: function () { return [JhiKeysPipe, ɵngcc1.DecimalPipe]; }, encapsulation: 2 });
__decorate([
    Input()
], JhiMetricsEndpointsRequestsComponent.prototype, "endpointsRequestsMetrics", void 0);
__decorate([
    Input()
], JhiMetricsEndpointsRequestsComponent.prototype, "updating", void 0);

let JhiMetricsGarbageCollectorComponent = class JhiMetricsGarbageCollectorComponent {
};
JhiMetricsGarbageCollectorComponent.ɵfac = function JhiMetricsGarbageCollectorComponent_Factory(t) { return new (t || JhiMetricsGarbageCollectorComponent)(); };
JhiMetricsGarbageCollectorComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: JhiMetricsGarbageCollectorComponent, selectors: [["jhi-metrics-garbagecollector"]], inputs: { garbageCollectorMetrics: "garbageCollectorMetrics", updating: "updating" }, decls: 9, vars: 5, consts: [[1, "row"], [1, "col-md-4"], [4, "ngIf"], ["class", "row", 4, "ngIf"], ["class", "table-responsive", 4, "ngIf"], ["type", "success", 3, "max", "value", "striped", "animated"], [1, "col-md-9"], [1, "col-md-3", "text-right"], [1, "table-responsive"], [1, "table", "table-striped"], ["jhiTranslate", "metrics.servicesstats.table.count", 1, "text-right"], ["jhiTranslate", "metrics.servicesstats.table.mean", 1, "text-right"], ["jhiTranslate", "metrics.servicesstats.table.min", 1, "text-right"], ["jhiTranslate", "metrics.servicesstats.table.p50", 1, "text-right"], ["jhiTranslate", "metrics.servicesstats.table.p75", 1, "text-right"], ["jhiTranslate", "metrics.servicesstats.table.p95", 1, "text-right"], ["jhiTranslate", "metrics.servicesstats.table.p99", 1, "text-right"], ["jhiTranslate", "metrics.servicesstats.table.max", 1, "text-right"], [1, "text-right"]], template: function JhiMetricsGarbageCollectorComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "div", 0);
        ɵngcc0.ɵɵelementStart(1, "div", 1);
        ɵngcc0.ɵɵtemplate(2, JhiMetricsGarbageCollectorComponent_div_2_Template, 9, 16, "div", 2);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(3, "div", 1);
        ɵngcc0.ɵɵtemplate(4, JhiMetricsGarbageCollectorComponent_div_4_Template, 9, 16, "div", 2);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(5, "div", 1);
        ɵngcc0.ɵɵtemplate(6, JhiMetricsGarbageCollectorComponent_div_6_Template, 5, 1, "div", 3);
        ɵngcc0.ɵɵtemplate(7, JhiMetricsGarbageCollectorComponent_div_7_Template, 5, 1, "div", 3);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtemplate(8, JhiMetricsGarbageCollectorComponent_div_8_Template, 48, 29, "div", 4);
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("ngIf", ctx.garbageCollectorMetrics);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("ngIf", ctx.garbageCollectorMetrics);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("ngIf", ctx.garbageCollectorMetrics);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.garbageCollectorMetrics);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", !ctx.updating && ctx.garbageCollectorMetrics);
    } }, directives: [ɵngcc1.NgIf, ɵngcc3.NgbProgressbar, JhiTranslateDirective], pipes: [ɵngcc1.DecimalPipe], encapsulation: 2 });
__decorate([
    Input()
], JhiMetricsGarbageCollectorComponent.prototype, "garbageCollectorMetrics", void 0);
__decorate([
    Input()
], JhiMetricsGarbageCollectorComponent.prototype, "updating", void 0);

let JhiMetricsHttpRequestComponent = class JhiMetricsHttpRequestComponent {
    filterNaN(input) {
        if (isNaN(input)) {
            return 0;
        }
        return input;
    }
};
JhiMetricsHttpRequestComponent.ɵfac = function JhiMetricsHttpRequestComponent_Factory(t) { return new (t || JhiMetricsHttpRequestComponent)(); };
JhiMetricsHttpRequestComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: JhiMetricsHttpRequestComponent, selectors: [["jhi-metrics-request"]], inputs: { requestMetrics: "requestMetrics", updating: "updating" }, decls: 3, vars: 1, consts: [["jhiTranslate", "metrics.jvm.http.title"], ["class", "table table-striped", 4, "ngIf"], [1, "table", "table-striped"], ["jhiTranslate", "metrics.jvm.http.table.code"], ["jhiTranslate", "metrics.jvm.http.table.count"], ["jhiTranslate", "metrics.jvm.http.table.mean", 1, "text-right"], ["jhiTranslate", "metrics.jvm.http.table.max", 1, "text-right"], [4, "ngFor", "ngForOf"], ["type", "success", 3, "max", "value", "striped", "animated"], [1, "text-right"]], template: function JhiMetricsHttpRequestComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "h3", 0);
        ɵngcc0.ɵɵtext(1, "HTTP requests (time in millisecond)");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtemplate(2, JhiMetricsHttpRequestComponent_table_2_Template, 14, 3, "table", 1);
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("ngIf", !ctx.updating);
    } }, directives: function () { return [JhiTranslateDirective, ɵngcc1.NgIf, ɵngcc1.NgForOf, ɵngcc3.NgbProgressbar]; }, pipes: function () { return [JhiKeysPipe, ɵngcc1.DecimalPipe]; }, encapsulation: 2 });
__decorate([
    Input()
], JhiMetricsHttpRequestComponent.prototype, "requestMetrics", void 0);
__decorate([
    Input()
], JhiMetricsHttpRequestComponent.prototype, "updating", void 0);

let JhiMetricsSystemComponent = class JhiMetricsSystemComponent {
    convertMillisecondsToDuration(ms) {
        const times = {
            year: 31557600000,
            month: 2629746000,
            day: 86400000,
            hour: 3600000,
            minute: 60000,
            second: 1000
        };
        let timeString = '';
        for (const key in times) {
            if (Math.floor(ms / times[key]) > 0) {
                let plural = '';
                if (Math.floor(ms / times[key]) > 1) {
                    plural = 's';
                }
                timeString += Math.floor(ms / times[key]).toString() + ' ' + key.toString() + plural + ' ';
                ms = ms - times[key] * Math.floor(ms / times[key]);
            }
        }
        return timeString;
    }
};
JhiMetricsSystemComponent.ɵfac = function JhiMetricsSystemComponent_Factory(t) { return new (t || JhiMetricsSystemComponent)(); };
JhiMetricsSystemComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: JhiMetricsSystemComponent, selectors: [["jhi-metrics-system"]], inputs: { systemMetrics: "systemMetrics", updating: "updating" }, decls: 12, vars: 10, consts: [["class", "row", 4, "ngIf"], ["type", "success", 3, "value", "striped", "animated", 4, "ngIf"], [1, "row"], [1, "col-md-4"], [1, "col-md-8", "text-right"], [1, "col-md-9"], [1, "col-md-3", "text-right"], ["type", "success", 3, "value", "striped", "animated"]], template: function JhiMetricsSystemComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "h4");
        ɵngcc0.ɵɵtext(1, "System");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtemplate(2, JhiMetricsSystemComponent_div_2_Template, 5, 1, "div", 0);
        ɵngcc0.ɵɵtemplate(3, JhiMetricsSystemComponent_div_3_Template, 6, 4, "div", 0);
        ɵngcc0.ɵɵtemplate(4, JhiMetricsSystemComponent_div_4_Template, 6, 4, "div", 0);
        ɵngcc0.ɵɵtemplate(5, JhiMetricsSystemComponent_ngb_progressbar_5_Template, 4, 7, "ngb-progressbar", 1);
        ɵngcc0.ɵɵtemplate(6, JhiMetricsSystemComponent_div_6_Template, 6, 4, "div", 0);
        ɵngcc0.ɵɵtemplate(7, JhiMetricsSystemComponent_ngb_progressbar_7_Template, 4, 7, "ngb-progressbar", 1);
        ɵngcc0.ɵɵtemplate(8, JhiMetricsSystemComponent_div_8_Template, 5, 1, "div", 0);
        ɵngcc0.ɵɵtemplate(9, JhiMetricsSystemComponent_div_9_Template, 6, 4, "div", 0);
        ɵngcc0.ɵɵtemplate(10, JhiMetricsSystemComponent_div_10_Template, 6, 4, "div", 0);
        ɵngcc0.ɵɵtemplate(11, JhiMetricsSystemComponent_div_11_Template, 6, 4, "div", 0);
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("ngIf", !ctx.updating);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", !ctx.updating);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", !ctx.updating);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", !ctx.updating);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", !ctx.updating);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", !ctx.updating);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", !ctx.updating);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", !ctx.updating);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", !ctx.updating);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", !ctx.updating);
    } }, directives: [ɵngcc1.NgIf, ɵngcc3.NgbProgressbar], pipes: [ɵngcc1.DatePipe, ɵngcc1.DecimalPipe], encapsulation: 2 });
__decorate([
    Input()
], JhiMetricsSystemComponent.prototype, "systemMetrics", void 0);
__decorate([
    Input()
], JhiMetricsSystemComponent.prototype, "updating", void 0);

let JhiCapitalizePipe = class JhiCapitalizePipe {
    transform(input) {
        if (input !== null) {
            input = input.toLowerCase();
        }
        return input.substring(0, 1).toUpperCase() + input.substring(1);
    }
};
JhiCapitalizePipe.ɵfac = function JhiCapitalizePipe_Factory(t) { return new (t || JhiCapitalizePipe)(); };
JhiCapitalizePipe.ɵpipe = ɵngcc0.ɵɵdefinePipe({ name: "capitalize", type: JhiCapitalizePipe, pure: true });

let JhiFilterPipe = class JhiFilterPipe {
    transform(input, filter, field) {
        if (typeof filter === 'undefined' || filter === '') {
            return input;
        }
        // if filter is of type 'function' compute current value of filter, otherwise return filter
        const currentFilter = typeof filter === 'function' ? filter() : filter;
        if (typeof currentFilter === 'number') {
            return input.filter(this.filterByNumber(currentFilter, field));
        }
        if (typeof currentFilter === 'boolean') {
            return input.filter(this.filterByBoolean(currentFilter, field));
        }
        if (typeof currentFilter === 'string') {
            return input.filter(this.filterByString(currentFilter, field));
        }
        if (typeof currentFilter === 'object') {
            // filter by object ignores 'field' if specified
            return input.filter(this.filterByObject(currentFilter));
        }
        // 'symbol' && 'undefined'
        return input.filter(this.filterDefault(currentFilter, field));
    }
    filterByNumber(filter, field) {
        return value => (value && !filter) || (typeof value === 'object' && field)
            ? value[field] && typeof value[field] === 'number' && value[field] === filter
            : typeof value === 'number' && value === filter;
    }
    filterByBoolean(filter, field) {
        return value => typeof value === 'object' && field
            ? value[field] && typeof value[field] === 'boolean' && value[field] === filter
            : typeof value === 'boolean' && value === filter;
    }
    filterByString(filter, field) {
        return value => (value && !filter) || (typeof value === 'object' && field)
            ? value[field] && typeof value[field] === 'string' && value[field].toLowerCase().includes(filter.toLowerCase())
            : typeof value === 'string' && value.toLowerCase().includes(filter.toLowerCase());
    }
    filterDefault(filter, field) {
        return value => ((value && !filter) || (typeof value === 'object' && field) ? value[field] && filter === value : filter === value);
    }
    filterByObject(filter) {
        return value => {
            const keys = Object.keys(filter);
            let isMatching = false;
            // all fields defined in filter object must match
            for (const key of keys) {
                if (typeof filter[key] === 'number') {
                    isMatching = this.filterByNumber(filter[key])(value[key]);
                }
                else if (typeof filter[key] === 'boolean') {
                    isMatching = this.filterByBoolean(filter[key])(value[key]);
                }
                else if (typeof filter[key] === 'string') {
                    isMatching = this.filterByString(filter[key])(value[key]);
                }
                else {
                    isMatching = this.filterDefault(filter[key])(value[key]);
                }
            }
            return isMatching;
        };
    }
};
JhiFilterPipe.ɵfac = function JhiFilterPipe_Factory(t) { return new (t || JhiFilterPipe)(); };
JhiFilterPipe.ɵpipe = ɵngcc0.ɵɵdefinePipe({ name: "filter", type: JhiFilterPipe, pure: false });

let JhiKeysPipe = class JhiKeysPipe {
    transform(value) {
        const keys = [];
        const valueKeys = Object.keys(value);
        for (const key of valueKeys) {
            keys.push({ key, value: value[key] });
        }
        return keys;
    }
};
JhiKeysPipe.ɵfac = function JhiKeysPipe_Factory(t) { return new (t || JhiKeysPipe)(); };
JhiKeysPipe.ɵpipe = ɵngcc0.ɵɵdefinePipe({ name: "keys", type: JhiKeysPipe, pure: true });

let JhiOrderByPipe = class JhiOrderByPipe {
    transform(values, predicate = '', reverse = false) {
        if (predicate === '') {
            return reverse ? values.sort().reverse() : values.sort();
        }
        return values.sort((a, b) => {
            if (a[predicate] < b[predicate]) {
                return reverse ? 1 : -1;
            }
            else if (b[predicate] < a[predicate]) {
                return reverse ? -1 : 1;
            }
            return 0;
        });
    }
};
JhiOrderByPipe.ɵfac = function JhiOrderByPipe_Factory(t) { return new (t || JhiOrderByPipe)(); };
JhiOrderByPipe.ɵpipe = ɵngcc0.ɵɵdefinePipe({ name: "orderBy", type: JhiOrderByPipe, pure: true });

let JhiPureFilterPipe = class JhiPureFilterPipe extends JhiFilterPipe {
    transform(input, filter, field) {
        return super.transform(input, filter, field);
    }
};
JhiPureFilterPipe.ɵfac = function JhiPureFilterPipe_Factory(t) { return ɵJhiPureFilterPipe_BaseFactory(t || JhiPureFilterPipe); };
JhiPureFilterPipe.ɵpipe = ɵngcc0.ɵɵdefinePipe({ name: "pureFilter", type: JhiPureFilterPipe, pure: true });

let JhiTruncateCharactersPipe = class JhiTruncateCharactersPipe {
    transform(input, chars, breakOnWord) {
        if (isNaN(chars)) {
            return input;
        }
        if (chars <= 0) {
            return '';
        }
        if (input && input.length > chars) {
            input = input.substring(0, chars);
            if (!breakOnWord) {
                const lastspace = input.lastIndexOf(' ');
                // Get last space
                if (lastspace !== -1) {
                    input = input.substr(0, lastspace);
                }
            }
            else {
                while (input.endsWith(' ')) {
                    input = input.substr(0, input.length - 1);
                }
            }
            return input + '...';
        }
        return input;
    }
};
JhiTruncateCharactersPipe.ɵfac = function JhiTruncateCharactersPipe_Factory(t) { return new (t || JhiTruncateCharactersPipe)(); };
JhiTruncateCharactersPipe.ɵpipe = ɵngcc0.ɵɵdefinePipe({ name: "truncateCharacters", type: JhiTruncateCharactersPipe, pure: true });

let JhiTruncateWordsPipe = class JhiTruncateWordsPipe {
    transform(input, words) {
        if (isNaN(words)) {
            return input;
        }
        if (words <= 0) {
            return '';
        }
        if (input) {
            const inputWords = input.split(/\s+/);
            if (inputWords.length > words) {
                input = inputWords.slice(0, words).join(' ') + '...';
            }
        }
        return input;
    }
};
JhiTruncateWordsPipe.ɵfac = function JhiTruncateWordsPipe_Factory(t) { return new (t || JhiTruncateWordsPipe)(); };
JhiTruncateWordsPipe.ɵpipe = ɵngcc0.ɵɵdefinePipe({ name: "truncateWords", type: JhiTruncateWordsPipe, pure: true });

/*
 Copyright 2013-2020 the original author or authors from the JHipster project.

 This file is part of the JHipster project, see https://www.jhipster.tech/
 for more information.

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

 http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
 */
const JHI_PIPES = [
    JhiCapitalizePipe,
    JhiFilterPipe,
    JhiKeysPipe,
    JhiOrderByPipe,
    JhiPureFilterPipe,
    JhiTruncateCharactersPipe,
    JhiTruncateWordsPipe
];
const JHI_DIRECTIVES = [
    JhiMaxValidatorDirective,
    JhiMinValidatorDirective,
    JhiMaxbytesValidatorDirective,
    JhiMinbytesValidatorDirective,
    JhiSortDirective,
    JhiSortByDirective
];
const JHI_COMPONENTS = [
    JhiItemCountComponent,
    JhiBooleanComponent,
    JhiJvmMemoryComponent,
    JhiJvmThreadsComponent,
    JhiMetricsHttpRequestComponent,
    JhiMetricsEndpointsRequestsComponent,
    JhiMetricsCacheComponent,
    JhiMetricsDatasourceComponent,
    JhiMetricsSystemComponent,
    JhiMetricsGarbageCollectorComponent,
    JhiThreadModalComponent
];

var NgJhipsterModule_1;
function translatePartialLoader(http) {
    return new TranslateHttpLoader(http, 'i18n/', `.json?buildTimestamp=${process.env.BUILD_TIMESTAMP}`);
}
function missingTranslationHandler(configService) {
    return new JhiMissingTranslationHandler(configService);
}
let NgJhipsterModule = NgJhipsterModule_1 = class NgJhipsterModule {
    static forRoot(moduleConfig) {
        return {
            ngModule: NgJhipsterModule_1,
            providers: [{ provide: JhiModuleConfig, useValue: moduleConfig }]
        };
    }
};
NgJhipsterModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: NgJhipsterModule });
NgJhipsterModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function NgJhipsterModule_Factory(t) { return new (t || NgJhipsterModule)(); }, imports: [[CommonModule, NgbModule, FormsModule],
        CommonModule] });

/*
 Copyright 2013-2020 the original author or authors from the JHipster project.

 This file is part of the JHipster project, see https://www.jhipster.tech/
 for more information.

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

 http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
 */

/**
 * An utility service for pagination
 */
let JhiPaginationUtil = class JhiPaginationUtil {
    constructor() {
    }
    /**
     * Method to find whether the sort is defined
     */
    parseAscending(sort) {
        let sortArray = sort.split(',');
        sortArray = sortArray.length > 1 ? sortArray : sort.split('%2C');
        if (sortArray.length > 1) {
            return sortArray.slice(-1)[0] === 'asc';
        }
        // default to true if no sort is defined
        return true;
    }
    /**
     * Method to query params are strings, and need to be parsed
     */
    parsePage(page) {
        return parseInt(page, 10);
    }
    /**
     * Method to sort can be in the format `id,asc` or `id`
     */
    parsePredicate(sort) {
        return sort.split(',')[0].split('%2C')[0];
    }
};
JhiPaginationUtil.ɵfac = function JhiPaginationUtil_Factory(t) { return new (t || JhiPaginationUtil)(); };
JhiPaginationUtil.ɵprov = ɵɵdefineInjectable({ factory: function JhiPaginationUtil_Factory() { return new JhiPaginationUtil(); }, token: JhiPaginationUtil, providedIn: "root" });

/**
 * An utility service for link parsing.
 */
let JhiParseLinks = class JhiParseLinks {
    constructor() {
    }
    /**
     * Method to parse the links
     */
    parse(header) {
        if (header.length === 0) {
            throw new Error('input must not be of zero length');
        }
        // Split parts by comma
        const parts = header.split(',');
        const links = {};
        // Parse each part into a named link
        parts.forEach(p => {
            const section = p.split(';');
            if (section.length !== 2) {
                throw new Error('section could not be split on ";"');
            }
            const url = section[0].replace(/<(.*)>/, '$1').trim();
            const queryString = {};
            url.replace(new RegExp('([^?=&]+)(=([^&]*))?', 'g'), ($0, $1, $2, $3) => (queryString[$1] = $3));
            let page = queryString.page;
            if (typeof page === 'string') {
                page = parseInt(page, 10);
            }
            const name = section[1].replace(/rel="(.*)"/, '$1').trim();
            links[name] = page;
        });
        return links;
    }
};
JhiParseLinks.ɵfac = function JhiParseLinks_Factory(t) { return new (t || JhiParseLinks)(); };
JhiParseLinks.ɵprov = ɵɵdefineInjectable({ factory: function JhiParseLinks_Factory() { return new JhiParseLinks(); }, token: JhiParseLinks, providedIn: "root" });

/**
 * An utility service for data.
 */
let JhiDataUtils = class JhiDataUtils {
    constructor() {
    }
    /**
     * Method to abbreviate the text given
     */
    abbreviate(text, append = '...') {
        if (text.length < 30) {
            return text;
        }
        return text ? text.substring(0, 15) + append + text.slice(-10) : '';
    }
    /**
     * Method to find the byte size of the string provides
     */
    byteSize(base64String) {
        return this.formatAsBytes(this.size(base64String));
    }
    /**
     * Method to open file
     */
    openFile(contentType, data) {
        if (window.navigator && window.navigator.msSaveOrOpenBlob) {
            // To support IE and Edge
            const byteCharacters = atob(data);
            const byteNumbers = new Array(byteCharacters.length);
            for (let i = 0; i < byteCharacters.length; i++) {
                byteNumbers[i] = byteCharacters.charCodeAt(i);
            }
            const byteArray = new Uint8Array(byteNumbers);
            const blob = new Blob([byteArray], {
                type: contentType
            });
            window.navigator.msSaveOrOpenBlob(blob);
        }
        else {
            // Other browsers
            const fileURL = `data:${contentType};base64,${data}`;
            const win = window.open();
            win.document.write('<iframe src="' +
                fileURL +
                '" frameborder="0" style="border:0; top:0; left:0; bottom:0; right:0; width:100%; height:100%;" allowfullscreen></iframe>');
        }
    }
    /**
     * Method to convert the file to base64
     */
    toBase64(file, cb) {
        const fileReader = new FileReader();
        fileReader.onload = function (e) {
            const base64Data = e.target.result.substr(e.target.result.indexOf('base64,') + 'base64,'.length);
            cb(base64Data);
        };
        fileReader.readAsDataURL(file);
    }
    /**
     * Method to clear the input
     */
    clearInputImage(entity, elementRef, field, fieldContentType, idInput) {
        if (entity && field && fieldContentType) {
            if (Object.prototype.hasOwnProperty.call(entity, field)) {
                entity[field] = null;
            }
            if (Object.prototype.hasOwnProperty.call(entity, fieldContentType)) {
                entity[fieldContentType] = null;
            }
            if (elementRef && idInput && elementRef.nativeElement.querySelector('#' + idInput)) {
                elementRef.nativeElement.querySelector('#' + idInput).value = null;
            }
        }
    }
    /**
     * Sets the base 64 data & file type of the 1st file on the event (event.target.files[0]) in the passed entity object
     * and returns a promise.
     *
     * @param event the object containing the file (at event.target.files[0])
     * @param entity the object to set the file's 'base 64 data' and 'file type' on
     * @param field the field name to set the file's 'base 64 data' on
     * @param isImage boolean representing if the file represented by the event is an image
     * @returns a promise that resolves to the modified entity if operation is successful, otherwise rejects with an error message
     */
    setFileData(event, entity, field, isImage) {
        return new Promise((resolve, reject) => {
            if (event && event.target && event.target.files && event.target.files[0]) {
                const file = event.target.files[0];
                if (isImage && !file.type.startsWith('image/')) {
                    reject(`File was expected to be an image but was found to be ${file.type}`);
                }
                else {
                    this.toBase64(file, base64Data => {
                        entity[field] = base64Data;
                        entity[`${field}ContentType`] = file.type;
                        resolve(entity);
                    });
                }
            }
            else {
                reject(`Base64 data was not set as file could not be extracted from passed parameter: ${event}`);
            }
        });
    }
    /**
     * Sets the base 64 data & file type of the 1st file on the event (event.target.files[0]) in the passed entity object
     * and returns an observable.
     *
     * @param event the object containing the file (at event.target.files[0])
     * @param editForm the form group where the input field is located
     * @param field the field name to set the file's 'base 64 data' on
     * @param isImage boolean representing if the file represented by the event is an image
     * @returns an observable that loads file to form field and completes if sussessful
     *          or returns error as JhiFileLoadError on failure
     */
    loadFileToForm(event, editForm, field, isImage) {
        return new Observable((observer) => {
            const eventTarget = event.target;
            if (eventTarget.files && eventTarget.files[0]) {
                const file = eventTarget.files[0];
                if (isImage && !file.type.startsWith('image/')) {
                    const error = {
                        message: `File was expected to be an image but was found to be '${file.type}'`,
                        key: 'not.image',
                        params: { fileType: file.type }
                    };
                    observer.error(error);
                }
                else {
                    const fieldContentType = field + 'ContentType';
                    this.toBase64(file, (base64Data) => {
                        editForm.patchValue({
                            [field]: base64Data,
                            [fieldContentType]: file.type
                        });
                        observer.next();
                        observer.complete();
                    });
                }
            }
            else {
                const error = {
                    message: 'Could not extract file',
                    key: 'could.not.extract',
                    params: { event }
                };
                observer.error(error);
            }
        });
    }
    /**
     * Method to download file
     */
    downloadFile(contentType, data, fileName) {
        const byteCharacters = atob(data);
        const byteNumbers = new Array(byteCharacters.length);
        for (let i = 0; i < byteCharacters.length; i++) {
            byteNumbers[i] = byteCharacters.charCodeAt(i);
        }
        const byteArray = new Uint8Array(byteNumbers);
        const blob = new Blob([byteArray], {
            type: contentType
        });
        const tempLink = document.createElement('a');
        tempLink.href = window.URL.createObjectURL(blob);
        tempLink.download = fileName;
        tempLink.target = '_blank';
        tempLink.click();
    }
    endsWith(suffix, str) {
        return str.includes(suffix, str.length - suffix.length);
    }
    paddingSize(value) {
        if (this.endsWith('==', value)) {
            return 2;
        }
        if (this.endsWith('=', value)) {
            return 1;
        }
        return 0;
    }
    size(value) {
        return (value.length / 4) * 3 - this.paddingSize(value);
    }
    formatAsBytes(size) {
        return size.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ' ') + ' bytes';
    }
};
JhiDataUtils.ɵfac = function JhiDataUtils_Factory(t) { return new (t || JhiDataUtils)(); };
JhiDataUtils.ɵprov = ɵɵdefineInjectable({ factory: function JhiDataUtils_Factory() { return new JhiDataUtils(); }, token: JhiDataUtils, providedIn: "root" });

/**
 * An utility service for date.
 */
let JhiDateUtils = class JhiDateUtils {
    constructor() {
        this.pattern = 'yyyy-MM-dd';
        this.datePipe = new DatePipe('en');
    }
    /**
     * Method to convert the date time from server into JS date object
     */
    convertDateTimeFromServer(date) {
        if (date) {
            return new Date(date);
        }
        else {
            return null;
        }
    }
    /**
     * Method to convert the date from server into JS date object
     */
    convertLocalDateFromServer(date) {
        if (date) {
            const dateString = date.split('-');
            return new Date(dateString[0], dateString[1] - 1, dateString[2]);
        }
        return null;
    }
    /**
     * Method to convert the JS date object into specified date pattern
     */
    convertLocalDateToServer(date, pattern = this.pattern) {
        if (date) {
            const newDate = new Date(date.year, date.month - 1, date.day);
            return this.datePipe.transform(newDate, pattern);
        }
        else {
            return null;
        }
    }
    /**
     * Method to get the default date pattern
     */
    dateformat() {
        return this.pattern;
    }
    // TODO Change this method when moving from datetime-local input to NgbDatePicker
    toDate(date) {
        if (date === undefined || date === null) {
            return null;
        }
        const dateParts = date.split(/\D+/);
        if (dateParts.length === 7) {
            return new Date(dateParts[0], dateParts[1] - 1, dateParts[2], dateParts[3], dateParts[4], dateParts[5], dateParts[6]);
        }
        if (dateParts.length === 6) {
            return new Date(dateParts[0], dateParts[1] - 1, dateParts[2], dateParts[3], dateParts[4], dateParts[5]);
        }
        return new Date(dateParts[0], dateParts[1] - 1, dateParts[2], dateParts[3], dateParts[4]);
    }
};
JhiDateUtils.ɵfac = function JhiDateUtils_Factory(t) { return new (t || JhiDateUtils)(); };
JhiDateUtils.ɵprov = ɵɵdefineInjectable({ factory: function JhiDateUtils_Factory() { return new JhiDateUtils(); }, token: JhiDateUtils, providedIn: "root" });

/**
 * An utility class to manage RX events
 */
let JhiEventManager = class JhiEventManager {
    constructor() {
        this.observable = Observable.create((observer) => {
            this.observer = observer;
        }).pipe(share());
    }
    /**
     * Method to broadcast the event to observer
     */
    broadcast(event) {
        if (this.observer) {
            this.observer.next(event);
        }
    }
    /**
     * Method to subscribe to an event with callback
     */
    subscribe(eventName, callback) {
        const subscriber = this.observable
            .pipe(filter((event) => {
            if (typeof event === 'string') {
                return event === eventName;
            }
            return event.name === eventName;
        }), map((event) => {
            if (typeof event !== 'string') {
                // when releasing generator-jhipster v7 then current return will be changed to
                // (to avoid redundant code response.content in JhiEventManager.subscribe callbacks):
                // return event.content;
                return event;
            }
        }))
            .subscribe(callback);
        return subscriber;
    }
    /**
     * Method to unsubscribe the subscription
     */
    destroy(subscriber) {
        subscriber.unsubscribe();
    }
};
JhiEventManager.ɵfac = function JhiEventManager_Factory(t) { return new (t || JhiEventManager)(); };
JhiEventManager.ɵprov = ɵɵdefineInjectable({ factory: function JhiEventManager_Factory() { return new JhiEventManager(); }, token: JhiEventManager, providedIn: "root" });

/*
 Copyright 2013-2020 the original author or authors from the JHipster project.

 This file is part of the JHipster project, see https://www.jhipster.tech/
 for more information.

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

 http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
 */
class JhiEventWithContent {
    constructor(name, content) {
        this.name = name;
        this.content = content;
    }
}

let JhiAlertService = class JhiAlertService {
    constructor(sanitizer, configService, translateService) {
        this.sanitizer = sanitizer;
        this.configService = configService;
        this.translateService = translateService;
        const config = this.configService.getConfig();
        this.toast = config.alertAsToast;
        this.i18nEnabled = config.i18nEnabled;
        this.alertId = 0; // unique id for each alert. Starts from 0.
        this.alerts = [];
        this.timeout = config.alertTimeout;
    }
    clear() {
        this.alerts.splice(0, this.alerts.length);
    }
    get() {
        return this.alerts;
    }
    success(msg, params, position) {
        return this.addAlert({
            type: 'success',
            msg,
            params,
            timeout: this.timeout,
            toast: this.isToast(),
            position
        }, []);
    }
    error(msg, params, position) {
        return this.addAlert({
            type: 'danger',
            msg,
            params,
            timeout: this.timeout,
            toast: this.isToast(),
            position
        }, []);
    }
    warning(msg, params, position) {
        return this.addAlert({
            type: 'warning',
            msg,
            params,
            timeout: this.timeout,
            toast: this.isToast(),
            position
        }, []);
    }
    info(msg, params, position) {
        return this.addAlert({
            type: 'info',
            msg,
            params,
            timeout: this.timeout,
            toast: this.isToast(),
            position
        }, []);
    }
    addAlert(alertOptions, extAlerts) {
        alertOptions.id = this.alertId++;
        if (this.i18nEnabled && alertOptions.msg) {
            alertOptions.msg = this.translateService.instant(alertOptions.msg, alertOptions.params);
        }
        const alert = this.factory(alertOptions);
        if (alertOptions.timeout && alertOptions.timeout > 0) {
            setTimeout(() => {
                this.closeAlert(alertOptions.id, extAlerts);
            }, alertOptions.timeout);
        }
        return alert;
    }
    closeAlert(id, extAlerts) {
        const thisAlerts = extAlerts && extAlerts.length > 0 ? extAlerts : this.alerts;
        return this.closeAlertByIndex(thisAlerts.map(e => e.id).indexOf(id), thisAlerts);
    }
    closeAlertByIndex(index, thisAlerts) {
        return thisAlerts.splice(index, 1);
    }
    isToast() {
        return this.toast;
    }
    factory(alertOptions) {
        const alert = {
            type: alertOptions.type,
            msg: this.sanitizer.sanitize(SecurityContext.HTML, alertOptions.msg),
            id: alertOptions.id,
            timeout: alertOptions.timeout,
            toast: alertOptions.toast,
            position: alertOptions.position ? alertOptions.position : 'top right',
            scoped: alertOptions.scoped,
            close: (alerts) => {
                return this.closeAlert(alertOptions.id, alerts);
            }
        };
        if (!alert.scoped) {
            this.alerts.push(alert);
        }
        return alert;
    }
};
JhiAlertService.ɵfac = function JhiAlertService_Factory(t) { return new (t || JhiAlertService)(ɵngcc0.ɵɵinject(ɵngcc5.DomSanitizer), ɵngcc0.ɵɵinject(JhiConfigService), ɵngcc0.ɵɵinject(ɵngcc2.TranslateService, 8)); };
JhiAlertService.ctorParameters = () => [
    { type: DomSanitizer },
    { type: JhiConfigService },
    { type: TranslateService, decorators: [{ type: Optional }] }
];
JhiAlertService.ɵprov = ɵɵdefineInjectable({ factory: function JhiAlertService_Factory() { return new JhiAlertService(ɵɵinject(DomSanitizer), ɵɵinject(JhiConfigService), ɵɵinject(TranslateService, 8)); }, token: JhiAlertService, providedIn: "root" });
JhiAlertService = __decorate([ __param(2, Optional())
], JhiAlertService);

let JhiBase64Service = class JhiBase64Service {
    constructor() {
        this.keyStr = 'ABCDEFGHIJKLMNOP' + 'QRSTUVWXYZabcdef' + 'ghijklmnopqrstuv' + 'wxyz0123456789+/' + '=';
    }
    encode(input) {
        let output = '';
        let enc1 = '';
        let enc2 = '';
        let enc3 = '';
        let enc4 = '';
        let chr1 = '';
        let chr2 = '';
        let chr3 = '';
        let i = 0;
        while (i < input.length) {
            chr1 = input.charCodeAt(i++);
            chr2 = input.charCodeAt(i++);
            chr3 = input.charCodeAt(i++);
            enc1 = chr1 >> 2;
            enc2 = ((chr1 & 3) << 4) | (chr2 >> 4);
            enc3 = ((chr2 & 15) << 2) | (chr3 >> 6);
            enc4 = chr3 & 63;
            if (isNaN(chr2)) {
                enc3 = enc4 = 64;
            }
            else if (isNaN(chr3)) {
                enc4 = 64;
            }
            output = output + this.keyStr.charAt(enc1) + this.keyStr.charAt(enc2) + this.keyStr.charAt(enc3) + this.keyStr.charAt(enc4);
            chr1 = chr2 = chr3 = '';
            enc1 = enc2 = enc3 = enc4 = '';
        }
        return output;
    }
    decode(input) {
        let output = '';
        let enc1 = '';
        let enc2 = '';
        let enc3 = '';
        let enc4 = '';
        let chr1 = '';
        let chr2 = '';
        let chr3 = '';
        let i = 0;
        // remove all characters that are not A-Z, a-z, 0-9, +, /, or =
        input = input.replace(/[^A-Za-z0-9+/=]/g, '');
        while (i < input.length) {
            enc1 = this.keyStr.indexOf(input.charAt(i++));
            enc2 = this.keyStr.indexOf(input.charAt(i++));
            enc3 = this.keyStr.indexOf(input.charAt(i++));
            enc4 = this.keyStr.indexOf(input.charAt(i++));
            chr1 = (enc1 << 2) | (enc2 >> 4);
            chr2 = ((enc2 & 15) << 4) | (enc3 >> 2);
            chr3 = ((enc3 & 3) << 6) | enc4;
            output = output + String.fromCharCode(chr1);
            if (enc3 !== 64) {
                output = output + String.fromCharCode(chr2);
            }
            if (enc4 !== 64) {
                output = output + String.fromCharCode(chr3);
            }
            chr1 = chr2 = chr3 = '';
            enc1 = enc2 = enc3 = enc4 = '';
        }
        return output;
    }
};
JhiBase64Service.ɵfac = function JhiBase64Service_Factory(t) { return new (t || JhiBase64Service)(); };
JhiBase64Service.ɵprov = ɵɵdefineInjectable({ factory: function JhiBase64Service_Factory() { return new JhiBase64Service(); }, token: JhiBase64Service, providedIn: "root" });

let JhiResolvePagingParams = class JhiResolvePagingParams {
    constructor(paginationUtil) {
        this.paginationUtil = paginationUtil;
    }
    resolve(route, state) {
        const page = route.queryParams['page'] ? route.queryParams['page'] : '1';
        const defaultSort = route.data['defaultSort'] ? route.data['defaultSort'] : 'id,asc';
        const sort = route.queryParams['sort'] ? route.queryParams['sort'] : defaultSort;
        return {
            page: this.paginationUtil.parsePage(page),
            predicate: this.paginationUtil.parsePredicate(sort),
            ascending: this.paginationUtil.parseAscending(sort)
        };
    }
};
JhiResolvePagingParams.ɵfac = function JhiResolvePagingParams_Factory(t) { return new (t || JhiResolvePagingParams)(ɵngcc0.ɵɵinject(JhiPaginationUtil)); };
JhiResolvePagingParams.ctorParameters = () => [
    { type: JhiPaginationUtil }
];
JhiResolvePagingParams.ɵprov = ɵɵdefineInjectable({ factory: function JhiResolvePagingParams_Factory() { return new JhiResolvePagingParams(ɵɵinject(JhiPaginationUtil)); }, token: JhiResolvePagingParams, providedIn: "root" });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(JhiModuleConfig, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return []; }, null); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(JhiConfigService, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return [{ type: JhiModuleConfig }]; }, null); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(JhiItemCountComponent, [{
        type: Component,
        args: [{
                selector: 'jhi-item-count',
                template: `
        <div *ngIf="i18nEnabled; else noI18n" class="info jhi-item-count" jhiTranslate="global.item-count" [translateValues]="i18nValues()">
            /* [attr.translateValues] is used to get entire values in tests */
        </div>
        <ng-template #noI18n class="info jhi-item-count">
            Showing
            {{ (page - 1) * itemsPerPage == 0 ? 1 : (page - 1) * itemsPerPage + 1 }}
            - {{ page * itemsPerPage < total ? page * itemsPerPage : total }} of {{ total }} items.
        </ng-template>
    `
            }]
    }], function () { return [{ type: JhiConfigService }]; }, { page: [{
            type: Input
        }], total: [{
            type: Input
        }], itemsPerPage: [{
            type: Input
        }] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(JhiBooleanComponent, [{
        type: Component,
        args: [{
                selector: 'jhi-boolean',
                template: `
        <span [ngClass]="value ? classTrue : classFalse" [innerHtml]="value ? textTrue : textFalse"> </span>
    `
            }]
    }], function () { return [{ type: JhiConfigService }]; }, { classTrue: [{
            type: Input
        }], classFalse: [{
            type: Input
        }], value: [{
            type: Input
        }], textTrue: [{
            type: Input
        }], textFalse: [{
            type: Input
        }] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(JhiMaxbytesValidatorDirective, [{
        type: Directive,
        args: [{
                selector: '[jhiMaxbytes][ngModel]',
                // eslint-disable-next-line @typescript-eslint/no-use-before-define
                providers: [{ provide: NG_VALIDATORS, useExisting: forwardRef(() => JhiMaxbytesValidatorDirective_1), multi: true }]
            }]
    }], function () { return []; }, { jhiMaxbytes: [{
            type: Input
        }] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(JhiMinbytesValidatorDirective, [{
        type: Directive,
        args: [{
                selector: '[jhiMinbytes][ngModel]',
                // eslint-disable-next-line @typescript-eslint/no-use-before-define
                providers: [{ provide: NG_VALIDATORS, useExisting: forwardRef(() => JhiMinbytesValidatorDirective_1), multi: true }]
            }]
    }], function () { return []; }, { jhiMinbytes: [{
            type: Input
        }] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(JhiMaxValidatorDirective, [{
        type: Directive,
        args: [{
                selector: '[jhiMax][ngModel]',
                // eslint-disable-next-line @typescript-eslint/no-use-before-define
                providers: [{ provide: NG_VALIDATORS, useExisting: forwardRef(() => JhiMaxValidatorDirective_1), multi: true }]
            }]
    }], function () { return []; }, { jhiMax: [{
            type: Input
        }] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(JhiMinValidatorDirective, [{
        type: Directive,
        args: [{
                selector: '[jhiMin][ngModel]',
                // eslint-disable-next-line @typescript-eslint/no-use-before-define
                providers: [{ provide: NG_VALIDATORS, useExisting: forwardRef(() => JhiMinValidatorDirective_1), multi: true }]
            }]
    }], function () { return []; }, { jhiMin: [{
            type: Input
        }] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(JhiSortDirective, [{
        type: Directive,
        args: [{
                selector: '[jhiSort]'
            }]
    }], function () { return []; }, { predicateChange: [{
            type: Output
        }], ascendingChange: [{
            type: Output
        }], ascending: [{
            type: Input
        }], predicate: [{
            type: Input
        }], callback: [{
            type: Input
        }] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(JhiSortByDirective, [{
        type: Directive,
        args: [{
                selector: '[jhiSortBy]'
            }]
    }], function () { return [{ type: JhiSortDirective, decorators: [{
                type: Host
            }] }, { type: JhiConfigService }]; }, { onClick: [{
            type: HostListener,
            args: ['click']
        }], jhiSortBy: [{
            type: Input
        }], iconComponent: [{
            type: ContentChild,
            args: [FaIconComponent, { static: true }]
        }] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(JhiLanguageService, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return [{ type: ɵngcc2.TranslateService }, { type: JhiConfigService }]; }, null); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(JhiTranslateDirective, [{
        type: Directive,
        args: [{
                selector: '[jhiTranslate]'
            }]
    }], function () { return [{ type: JhiConfigService }, { type: ɵngcc0.ElementRef }, { type: ɵngcc2.TranslateService, decorators: [{
                type: Optional
            }] }]; }, { jhiTranslate: [{
            type: Input
        }], translateValues: [{
            type: Input
        }] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(JhiThreadModalComponent, [{
        type: Component,
        args: [{
                selector: 'jhi-thread-modal',
                template: `
        <div class="modal-header">
            <h4 class="modal-title" jhiTranslate="metrics.jvm.threads.dump.title">Threads dump</h4>
            <button type="button" class="close" (click)="activeModal.dismiss('closed')">&times;</button>
        </div>
        <div class="modal-body">
            <span class="badge badge-primary" (click)="threadDumpFilter = {}">
                All&nbsp;<span class="badge badge-pill badge-default">{{ threadDumpAll }}</span> </span
            >&nbsp;
            <span class="badge badge-success" (click)="threadDumpFilter = { threadState: 'RUNNABLE' }">
                Runnable&nbsp;<span class="badge badge-pill badge-default">{{ threadDumpRunnable }}</span> </span
            >&nbsp;
            <span class="badge badge-info" (click)="threadDumpFilter = { threadState: 'WAITING' }"
                >Waiting&nbsp;<span class="badge badge-pill badge-default">{{ threadDumpWaiting }}</span></span
            >&nbsp;
            <span class="badge badge-warning" (click)="threadDumpFilter = { threadState: 'TIMED_WAITING' }">
                Timed Waiting&nbsp;<span class="badge badge-pill badge-default">{{ threadDumpTimedWaiting }}</span> </span
            >&nbsp;
            <span class="badge badge-danger" (click)="threadDumpFilter = { threadState: 'BLOCKED' }"
                >Blocked&nbsp;<span class="badge badge-pill badge-default">{{ threadDumpBlocked }}</span></span
            >&nbsp;
            <div class="mt-2">&nbsp;</div>
            Filter
            <input type="text" [(ngModel)]="threadDumpFilter" class="form-control" />
            <div class="pad" *ngFor="let entry of (threadDump | pureFilter: threadDumpFilter:'lockName' | keys)">
                <h6>
                    <span class="badge" [ngClass]="getBadgeClass(entry.value.threadState)">{{ entry.value.threadState }}</span
                    >&nbsp;{{ entry.value.threadName }}
                    (ID
                    {{ entry.value.threadId }})
                    <a (click)="entry.show = !entry.show" href="javascript:void(0);">
                        <span [hidden]="entry.show" jhiTranslate="metrics.jvm.threads.dump.show">Show StackTrace</span>
                        <span [hidden]="!entry.show" jhiTranslate="metrics.jvm.threads.dump.hide">Hide StackTrace</span>
                    </a>
                </h6>
                <div class="card" [hidden]="!entry.show">
                    <div class="card-body">
                        <div *ngFor="let st of (entry.value.stackTrace | keys)" class="break">
                            <samp
                                >{{ st.value.className }}.{{ st.value.methodName }}(<code
                                    >{{ st.value.fileName }}:{{ st.value.lineNumber }}</code
                                >)</samp
                            >
                            <span class="mt-1"></span>
                        </div>
                    </div>
                </div>
                <table class="table table-sm table-responsive">
                    <thead>
                        <tr>
                            <th jhiTranslate="metrics.jvm.threads.dump.blockedtime">Blocked Time</th>
                            <th jhiTranslate="metrics.jvm.threads.dump.blockedcount">Blocked Count</th>
                            <th jhiTranslate="metrics.jvm.threads.dump.waitedtime">Waited Time</th>
                            <th jhiTranslate="metrics.jvm.threads.dump.waitedcount">Waited Count</th>
                            <th jhiTranslate="metrics.jvm.threads.dump.lockname">Lock Name</th>
                        </tr>
                    </thead>
                    <tbody>
                        <tr>
                            <td>{{ entry.value.blockedTime }}</td>
                            <td>{{ entry.value.blockedCount }}</td>
                            <td>{{ entry.value.waitedTime }}</td>
                            <td>{{ entry.value.waitedCount }}</td>
                            <td class="thread-dump-modal-lock" title="{{ entry.value.lockName }}">
                                <code>{{ entry.value.lockName }}</code>
                            </td>
                        </tr>
                    </tbody>
                </table>
            </div>
        </div>
        <div class="modal-footer">
            <button type="button" class="btn btn-secondary float-left" data-dismiss="modal" (click)="activeModal.dismiss('closed')">
                Done
            </button>
        </div>
    `
            }]
    }], function () { return [{ type: ɵngcc3.NgbActiveModal }]; }, null); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(JhiJvmMemoryComponent, [{
        type: Component,
        args: [{
                selector: 'jhi-jvm-memory',
                template: `
        <h4 jhiTranslate="metrics.jvm.memory.title">Memory</h4>
        <div *ngIf="!updating">
            <div *ngFor="let entry of (jvmMemoryMetrics | keys)">
                <span *ngIf="entry.value.max != -1; else other">
                    <span>{{ entry.key }}</span> ({{ entry.value.used / 1048576 | number: '1.0-0' }}M /
                    {{ entry.value.max / 1048576 | number: '1.0-0' }}M)
                </span>
                <div>Committed : {{ entry.value.committed / 1048576 | number: '1.0-0' }}M</div>
                <ng-template #other
                    ><span
                        ><span>{{ entry.key }}</span> {{ entry.value.used / 1048576 | number: '1.0-0' }}M</span
                    >
                </ng-template>
                <ngb-progressbar
                    *ngIf="entry.value.max != -1"
                    type="success"
                    [value]="(100 * entry.value.used) / entry.value.max"
                    [striped]="true"
                    [animated]="false"
                >
                    <span>{{ (entry.value.used * 100) / entry.value.max | number: '1.0-0' }}%</span>
                </ngb-progressbar>
            </div>
        </div>
    `
            }]
    }], null, { jvmMemoryMetrics: [{
            type: Input
        }], updating: [{
            type: Input
        }] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(JhiJvmThreadsComponent, [{
        type: Component,
        args: [{
                selector: 'jhi-jvm-threads',
                template: `
        <h4 jhiTranslate="metrics.jvm.threads.title">Threads</h4>
        <span><span jhiTranslate="metrics.jvm.threads.runnable">Runnable</span> {{ threadStats.threadDumpRunnable }}</span>
        <ngb-progressbar
            [value]="threadStats.threadDumpRunnable"
            [max]="threadStats.threadDumpAll"
            [striped]="true"
            [animated]="false"
            type="success"
        >
            <span>{{ (threadStats.threadDumpRunnable * 100) / threadStats.threadDumpAll | number: '1.0-0' }}%</span>
        </ngb-progressbar>
        <span><span jhiTranslate="metrics.jvm.threads.timedwaiting">Timed Waiting</span> ({{ threadStats.threadDumpTimedWaiting }})</span>
        <ngb-progressbar
            [value]="threadStats.threadDumpTimedWaiting"
            [max]="threadStats.threadDumpAll"
            [striped]="true"
            [animated]="false"
            type="warning"
        >
            <span>{{ (threadStats.threadDumpTimedWaiting * 100) / threadStats.threadDumpAll | number: '1.0-0' }}%</span>
        </ngb-progressbar>
        <span><span jhiTranslate="metrics.jvm.threads.waiting">Waiting</span> ({{ threadStats.threadDumpWaiting }})</span>
        <ngb-progressbar
            [value]="threadStats.threadDumpWaiting"
            [max]="threadStats.threadDumpAll"
            [striped]="true"
            [animated]="false"
            type="warning"
        >
            <span>{{ (threadStats.threadDumpWaiting * 100) / threadStats.threadDumpAll | number: '1.0-0' }}%</span>
        </ngb-progressbar>
        <span><span jhiTranslate="metrics.jvm.threads.blocked">Blocked</span> ({{ threadStats.threadDumpBlocked }})</span>
        <ngb-progressbar
            [value]="threadStats.threadDumpBlocked"
            [max]="threadStats.threadDumpAll"
            [striped]="true"
            [animated]="false"
            type="success"
        >
            <span>{{ (threadStats.threadDumpBlocked * 100) / threadStats.threadDumpAll | number: '1.0-0' }}%</span>
        </ngb-progressbar>
        <div>Total: {{ threadStats.threadDumpAll }}</div>
        <button class="hand btn btn-primary btn-sm" (click)="open()" data-toggle="modal" data-target="#threadDump">
            <span>Expand</span>
        </button>
    `
            }]
    }], function () { return [{ type: ɵngcc3.NgbModal }]; }, { threadData: [{
            type: Input
        }] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(JhiMetricsCacheComponent, [{
        type: Component,
        args: [{
                selector: 'jhi-metrics-cache',
                template: `
        <h3 jhiTranslate="metrics.cache.title">Cache statistics</h3>
        <div class="table-responsive" *ngIf="!updating">
            <table class="table table-striped">
                <thead>
                    <tr>
                        <th jhiTranslate="metrics.cache.cachename">Cache name</th>
                        <th class="text-right" data-translate="metrics.cache.hits">Cache Hits</th>
                        <th class="text-right" data-translate="metrics.cache.misses">Cache Misses</th>
                        <th class="text-right" data-translate="metrics.cache.gets">Cache Gets</th>
                        <th class="text-right" data-translate="metrics.cache.puts">Cache Puts</th>
                        <th class="text-right" data-translate="metrics.cache.removals">Cache Removals</th>
                        <th class="text-right" data-translate="metrics.cache.evictions">Cache Evictions</th>
                        <th class="text-right" data-translate="metrics.cache.hitPercent">Cache Hit %</th>
                        <th class="text-right" data-translate="metrics.cache.missPercent">Cache Miss %</th>
                    </tr>
                </thead>
                <tbody>
                    <tr *ngFor="let entry of (cacheMetrics | keys)">
                        <td>{{ entry.key }}</td>
                        <td class="text-right">{{ entry.value['cache.gets.hit'] }}</td>
                        <td class="text-right">{{ entry.value['cache.gets.miss'] }}</td>
                        <td class="text-right">{{ entry.value['cache.gets.hit'] + entry.value['cache.gets.miss'] }}</td>
                        <td class="text-right">{{ entry.value['cache.puts'] }}</td>
                        <td class="text-right">{{ entry.value['cache.removals'] }}</td>
                        <td class="text-right">{{ entry.value['cache.evictions'] }}</td>
                        <td class="text-right">
                            {{
                                filterNaN(
                                    (100 * entry.value['cache.gets.hit']) / (entry.value['cache.gets.hit'] + entry.value['cache.gets.miss'])
                                ) | number: '1.0-4'
                            }}
                        </td>
                        <td class="text-right">
                            {{
                                filterNaN(
                                    (100 * entry.value['cache.gets.miss']) /
                                        (entry.value['cache.gets.hit'] + entry.value['cache.gets.miss'])
                                ) | number: '1.0-4'
                            }}
                        </td>
                    </tr>
                </tbody>
            </table>
        </div>
    `
            }]
    }], null, { cacheMetrics: [{
            type: Input
        }], updating: [{
            type: Input
        }] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(JhiMetricsDatasourceComponent, [{
        type: Component,
        args: [{
                selector: 'jhi-metrics-datasource',
                template: `
        <h3 jhiTranslate="metrics.datasource.title">DataSource statistics (time in millisecond)</h3>
        <div class="table-responsive" *ngIf="!updating">
            <table class="table table-striped">
                <thead>
                    <tr>
                        <th>
                            <span jhiTranslate="metrics.datasource.usage">Connection Pool Usage</span> (active:
                            {{ datasourceMetrics.active.value }}, min: {{ datasourceMetrics.min.value }}, max:
                            {{ datasourceMetrics.max.value }}, idle: {{ datasourceMetrics.idle.value }})
                        </th>
                        <th class="text-right" jhiTranslate="metrics.datasource.count">Count</th>
                        <th class="text-right" jhiTranslate="metrics.datasource.mean">Mean</th>
                        <th class="text-right" jhiTranslate="metrics.servicesstats.table.min">Min</th>
                        <th class="text-right" jhiTranslate="metrics.servicesstats.table.p50">p50</th>
                        <th class="text-right" jhiTranslate="metrics.servicesstats.table.p75">p75</th>
                        <th class="text-right" jhiTranslate="metrics.servicesstats.table.p95">p95</th>
                        <th class="text-right" jhiTranslate="metrics.servicesstats.table.p99">p99</th>
                        <th class="text-right" jhiTranslate="metrics.datasource.max">Max</th>
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <td>Acquire</td>
                        <td class="text-right">{{ datasourceMetrics.acquire.count }}</td>
                        <td class="text-right">{{ filterNaN(datasourceMetrics.acquire.mean) | number: '1.0-2' }}</td>
                        <td class="text-right">{{ datasourceMetrics.acquire['0.0'] | number: '1.0-3' }}</td>
                        <td class="text-right">{{ datasourceMetrics.acquire['0.5'] | number: '1.0-3' }}</td>
                        <td class="text-right">{{ datasourceMetrics.acquire['0.75'] | number: '1.0-3' }}</td>
                        <td class="text-right">{{ datasourceMetrics.acquire['0.95'] | number: '1.0-3' }}</td>
                        <td class="text-right">{{ datasourceMetrics.acquire['0.99'] | number: '1.0-3' }}</td>
                        <td class="text-right">{{ filterNaN(datasourceMetrics.acquire.max) | number: '1.0-2' }}</td>
                    </tr>
                    <tr>
                        <td>Creation</td>
                        <td class="text-right">{{ datasourceMetrics.creation.count }}</td>
                        <td class="text-right">{{ filterNaN(datasourceMetrics.creation.mean) | number: '1.0-2' }}</td>
                        <td class="text-right">{{ datasourceMetrics.creation['0.0'] | number: '1.0-3' }}</td>
                        <td class="text-right">{{ datasourceMetrics.creation['0.5'] | number: '1.0-3' }}</td>
                        <td class="text-right">{{ datasourceMetrics.creation['0.75'] | number: '1.0-3' }}</td>
                        <td class="text-right">{{ datasourceMetrics.creation['0.95'] | number: '1.0-3' }}</td>
                        <td class="text-right">{{ datasourceMetrics.creation['0.99'] | number: '1.0-3' }}</td>
                        <td class="text-right">{{ filterNaN(datasourceMetrics.creation.max) | number: '1.0-2' }}</td>
                    </tr>
                    <tr>
                        <td>Usage</td>
                        <td class="text-right">{{ datasourceMetrics.usage.count }}</td>
                        <td class="text-right">{{ filterNaN(datasourceMetrics.usage.mean) | number: '1.0-2' }}</td>
                        <td class="text-right">{{ datasourceMetrics.usage['0.0'] | number: '1.0-3' }}</td>
                        <td class="text-right">{{ datasourceMetrics.usage['0.5'] | number: '1.0-3' }}</td>
                        <td class="text-right">{{ datasourceMetrics.usage['0.75'] | number: '1.0-3' }}</td>
                        <td class="text-right">{{ datasourceMetrics.usage['0.95'] | number: '1.0-3' }}</td>
                        <td class="text-right">{{ datasourceMetrics.usage['0.99'] | number: '1.0-3' }}</td>
                        <td class="text-right">{{ filterNaN(datasourceMetrics.usage.max) | number: '1.0-2' }}</td>
                    </tr>
                </tbody>
            </table>
        </div>
    `
            }]
    }], null, { datasourceMetrics: [{
            type: Input
        }], updating: [{
            type: Input
        }] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(JhiMetricsEndpointsRequestsComponent, [{
        type: Component,
        args: [{
                selector: 'jhi-metrics-endpoints-requests',
                template: `
        <h3>Endpoints requests (time in millisecond)</h3>
        <div class="table-responsive" *ngIf="!updating">
            <table class="table table-striped">
                <thead>
                    <tr>
                        <th>Method</th>
                        <th>Endpoint url</th>
                        <th class="text-right">Count</th>
                        <th class="text-right">Mean</th>
                    </tr>
                </thead>
                <tbody>
                    <ng-container *ngFor="let entry of (endpointsRequestsMetrics | keys)">
                        <tr *ngFor="let method of (entry.value | keys)">
                            <td>{{ method.key }}</td>
                            <td>{{ entry.key }}</td>
                            <td class="text-right">{{ method.value.count }}</td>
                            <td class="text-right">{{ method.value.mean | number: '1.0-3' }}</td>
                        </tr>
                    </ng-container>
                </tbody>
            </table>
        </div>
    `
            }]
    }], null, { endpointsRequestsMetrics: [{
            type: Input
        }], updating: [{
            type: Input
        }] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(JhiMetricsGarbageCollectorComponent, [{
        type: Component,
        args: [{
                selector: 'jhi-metrics-garbagecollector',
                template: `
        <div class="row">
            <div class="col-md-4">
                <div *ngIf="garbageCollectorMetrics">
                    <span>
                        GC Live Data Size/GC Max Data Size ({{
                            garbageCollectorMetrics['jvm.gc.live.data.size'] / 1048576 | number: '1.0-0'
                        }}M / {{ garbageCollectorMetrics['jvm.gc.max.data.size'] / 1048576 | number: '1.0-0' }}M)</span
                    >
                    <ngb-progressbar
                        [max]="garbageCollectorMetrics['jvm.gc.max.data.size']"
                        [value]="garbageCollectorMetrics['jvm.gc.live.data.size']"
                        [striped]="true"
                        [animated]="false"
                        type="success"
                    >
                        <span
                            >{{
                                (100 * garbageCollectorMetrics['jvm.gc.live.data.size']) / garbageCollectorMetrics['jvm.gc.max.data.size']
                                    | number: '1.0-2'
                            }}%</span
                        >
                    </ngb-progressbar>
                </div>
            </div>
            <div class="col-md-4">
                <div *ngIf="garbageCollectorMetrics">
                    <span>
                        GC Memory Promoted/GC Memory Allocated ({{
                            garbageCollectorMetrics['jvm.gc.memory.promoted'] / 1048576 | number: '1.0-0'
                        }}M / {{ garbageCollectorMetrics['jvm.gc.memory.allocated'] / 1048576 | number: '1.0-0' }}M)</span
                    >
                    <ngb-progressbar
                        [max]="garbageCollectorMetrics['jvm.gc.memory.allocated']"
                        [value]="garbageCollectorMetrics['jvm.gc.memory.promoted']"
                        [striped]="true"
                        [animated]="false"
                        type="success"
                    >
                        <span
                            >{{
                                (100 * garbageCollectorMetrics['jvm.gc.memory.promoted']) /
                                    garbageCollectorMetrics['jvm.gc.memory.allocated'] | number: '1.0-2'
                            }}%</span
                        >
                    </ngb-progressbar>
                </div>
            </div>
            <div class="col-md-4">
                <div class="row" *ngIf="garbageCollectorMetrics">
                    <div class="col-md-9">Classes loaded</div>
                    <div class="col-md-3 text-right">{{ garbageCollectorMetrics.classesLoaded }}</div>
                </div>
                <div class="row" *ngIf="garbageCollectorMetrics">
                    <div class="col-md-9">Classes unloaded</div>
                    <div class="col-md-3 text-right">{{ garbageCollectorMetrics.classesUnloaded }}</div>
                </div>
            </div>
            <div class="table-responsive" *ngIf="!updating && garbageCollectorMetrics">
                <table class="table table-striped">
                    <thead>
                        <tr>
                            <th></th>
                            <th class="text-right" jhiTranslate="metrics.servicesstats.table.count">Count</th>
                            <th class="text-right" jhiTranslate="metrics.servicesstats.table.mean">Mean</th>
                            <th class="text-right" jhiTranslate="metrics.servicesstats.table.min">Min</th>
                            <th class="text-right" jhiTranslate="metrics.servicesstats.table.p50">p50</th>
                            <th class="text-right" jhiTranslate="metrics.servicesstats.table.p75">p75</th>
                            <th class="text-right" jhiTranslate="metrics.servicesstats.table.p95">p95</th>
                            <th class="text-right" jhiTranslate="metrics.servicesstats.table.p99">p99</th>
                            <th class="text-right" jhiTranslate="metrics.servicesstats.table.max">Max</th>
                        </tr>
                    </thead>
                    <tbody>
                        <tr>
                            <td>jvm.gc.pause</td>
                            <td class="text-right">{{ garbageCollectorMetrics['jvm.gc.pause'].count }}</td>
                            <td class="text-right">{{ garbageCollectorMetrics['jvm.gc.pause'].mean | number: '1.0-3' }}</td>
                            <td class="text-right">{{ garbageCollectorMetrics['jvm.gc.pause']['0.0'] | number: '1.0-3' }}</td>
                            <td class="text-right">{{ garbageCollectorMetrics['jvm.gc.pause']['0.5'] | number: '1.0-3' }}</td>
                            <td class="text-right">{{ garbageCollectorMetrics['jvm.gc.pause']['0.75'] | number: '1.0-3' }}</td>
                            <td class="text-right">{{ garbageCollectorMetrics['jvm.gc.pause']['0.95'] | number: '1.0-3' }}</td>
                            <td class="text-right">{{ garbageCollectorMetrics['jvm.gc.pause']['0.99'] | number: '1.0-3' }}</td>
                            <td class="text-right">{{ garbageCollectorMetrics['jvm.gc.pause'].max | number: '1.0-3' }}</td>
                        </tr>
                    </tbody>
                </table>
            </div>
        </div>
    `
            }]
    }], null, { garbageCollectorMetrics: [{
            type: Input
        }], updating: [{
            type: Input
        }] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(JhiMetricsHttpRequestComponent, [{
        type: Component,
        args: [{
                selector: 'jhi-metrics-request',
                template: `
        <h3 jhiTranslate="metrics.jvm.http.title">HTTP requests (time in millisecond)</h3>
        <table class="table table-striped" *ngIf="!updating">
            <thead>
                <tr>
                    <th jhiTranslate="metrics.jvm.http.table.code">Code</th>
                    <th jhiTranslate="metrics.jvm.http.table.count">Count</th>
                    <th class="text-right" jhiTranslate="metrics.jvm.http.table.mean">Mean</th>
                    <th class="text-right" jhiTranslate="metrics.jvm.http.table.max">Max</th>
                </tr>
            </thead>
            <tbody>
                <tr *ngFor="let entry of (requestMetrics['percode'] | keys)">
                    <td>{{ entry.key }}</td>
                    <td>
                        <ngb-progressbar
                            [max]="requestMetrics['all'].count"
                            [value]="entry.value.count"
                            [striped]="true"
                            [animated]="false"
                            type="success"
                        >
                            <span>{{ entry.value.count }}</span>
                        </ngb-progressbar>
                    </td>
                    <td class="text-right">
                        {{ filterNaN(entry.value.mean) | number: '1.0-2' }}
                    </td>
                    <td class="text-right">{{ entry.value.max | number: '1.0-2' }}</td>
                </tr>
            </tbody>
        </table>
    `
            }]
    }], null, { requestMetrics: [{
            type: Input
        }], updating: [{
            type: Input
        }] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(JhiMetricsSystemComponent, [{
        type: Component,
        args: [{
                selector: 'jhi-metrics-system',
                template: `
        <h4>System</h4>
        <div class="row" *ngIf="!updating">
            <div class="col-md-4">Uptime</div>
            <div class="col-md-8 text-right">{{ convertMillisecondsToDuration(systemMetrics['process.uptime']) }}</div>
        </div>
        <div class="row" *ngIf="!updating">
            <div class="col-md-4">Start time</div>
            <div class="col-md-8 text-right">{{ systemMetrics['process.start.time'] | date: 'full' }}</div>
        </div>
        <div class="row" *ngIf="!updating">
            <div class="col-md-9">Process CPU usage</div>
            <div class="col-md-3 text-right">{{ 100 * systemMetrics['process.cpu.usage'] | number: '1.0-2' }} %</div>
        </div>
        <ngb-progressbar
            [value]="100 * systemMetrics['process.cpu.usage']"
            [striped]="true"
            [animated]="false"
            type="success"
            *ngIf="!updating"
        >
            <span>{{ 100 * systemMetrics['process.cpu.usage'] | number: '1.0-2' }} %</span>
        </ngb-progressbar>
        <div class="row" *ngIf="!updating">
            <div class="col-md-9">System CPU usage</div>
            <div class="col-md-3 text-right">{{ 100 * systemMetrics['system.cpu.usage'] | number: '1.0-2' }} %</div>
        </div>
        <ngb-progressbar
            [value]="100 * systemMetrics['system.cpu.usage']"
            [striped]="true"
            [animated]="false"
            type="success"
            *ngIf="!updating"
        >
            <span>{{ 100 * systemMetrics['system.cpu.usage'] | number: '1.0-2' }} %</span>
        </ngb-progressbar>
        <div class="row" *ngIf="!updating">
            <div class="col-md-9">System CPU count</div>
            <div class="col-md-3 text-right">{{ systemMetrics['system.cpu.count'] }}</div>
        </div>
        <div class="row" *ngIf="!updating">
            <div class="col-md-9">System 1m Load average</div>
            <div class="col-md-3 text-right">{{ systemMetrics['system.load.average.1m'] | number: '1.0-2' }}</div>
        </div>
        <div class="row" *ngIf="!updating">
            <div class="col-md-9">Process files max</div>
            <div class="col-md-3 text-right">{{ systemMetrics['process.files.max'] | number: '1.0-0' }}</div>
        </div>
        <div class="row" *ngIf="!updating">
            <div class="col-md-9">Process files open</div>
            <div class="col-md-3 text-right">{{ systemMetrics['process.files.open'] | number: '1.0-0' }}</div>
        </div>
    `
            }]
    }], null, { systemMetrics: [{
            type: Input
        }], updating: [{
            type: Input
        }] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(JhiCapitalizePipe, [{
        type: Pipe,
        args: [{ name: 'capitalize' }]
    }], null, null); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(JhiFilterPipe, [{
        type: Pipe,
        args: [{ name: 'filter', pure: false }]
    }], null, null); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(JhiKeysPipe, [{
        type: Pipe,
        args: [{ name: 'keys' }]
    }], null, null); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(JhiOrderByPipe, [{
        type: Pipe,
        args: [{ name: 'orderBy' }]
    }], null, null); })();
const ɵJhiPureFilterPipe_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(JhiPureFilterPipe);
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(JhiPureFilterPipe, [{
        type: Pipe,
        args: [{ name: 'pureFilter' }]
    }], null, null); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(JhiTruncateCharactersPipe, [{
        type: Pipe,
        args: [{ name: 'truncateCharacters' }]
    }], null, null); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(JhiTruncateWordsPipe, [{
        type: Pipe,
        args: [{ name: 'truncateWords' }]
    }], null, null); })();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(NgJhipsterModule, { declarations: function () { return [JhiCapitalizePipe,
        JhiFilterPipe,
        JhiKeysPipe,
        JhiOrderByPipe,
        JhiPureFilterPipe,
        JhiTruncateCharactersPipe,
        JhiTruncateWordsPipe,
        JhiMaxValidatorDirective,
        JhiMinValidatorDirective,
        JhiMaxbytesValidatorDirective,
        JhiMinbytesValidatorDirective,
        JhiSortDirective,
        JhiSortByDirective,
        JhiItemCountComponent,
        JhiBooleanComponent,
        JhiJvmMemoryComponent,
        JhiJvmThreadsComponent,
        JhiMetricsHttpRequestComponent,
        JhiMetricsEndpointsRequestsComponent,
        JhiMetricsCacheComponent,
        JhiMetricsDatasourceComponent,
        JhiMetricsSystemComponent,
        JhiMetricsGarbageCollectorComponent,
        JhiThreadModalComponent,
        JhiTranslateDirective]; }, imports: function () { return [CommonModule, NgbModule, FormsModule]; }, exports: function () { return [JhiCapitalizePipe,
        JhiFilterPipe,
        JhiKeysPipe,
        JhiOrderByPipe,
        JhiPureFilterPipe,
        JhiTruncateCharactersPipe,
        JhiTruncateWordsPipe,
        JhiMaxValidatorDirective,
        JhiMinValidatorDirective,
        JhiMaxbytesValidatorDirective,
        JhiMinbytesValidatorDirective,
        JhiSortDirective,
        JhiSortByDirective,
        JhiItemCountComponent,
        JhiBooleanComponent,
        JhiJvmMemoryComponent,
        JhiJvmThreadsComponent,
        JhiMetricsHttpRequestComponent,
        JhiMetricsEndpointsRequestsComponent,
        JhiMetricsCacheComponent,
        JhiMetricsDatasourceComponent,
        JhiMetricsSystemComponent,
        JhiMetricsGarbageCollectorComponent,
        JhiThreadModalComponent,
        JhiTranslateDirective,
        CommonModule]; } }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NgJhipsterModule, [{
        type: NgModule,
        args: [{
                imports: [CommonModule, NgbModule, FormsModule],
                declarations: [...JHI_PIPES, ...JHI_DIRECTIVES, ...JHI_COMPONENTS, JhiTranslateDirective],
                entryComponents: [JhiThreadModalComponent],
                exports: [...JHI_PIPES, ...JHI_DIRECTIVES, ...JHI_COMPONENTS, JhiTranslateDirective, CommonModule]
            }]
    }], null, null); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(JhiPaginationUtil, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return []; }, null); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(JhiParseLinks, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return []; }, null); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(JhiDataUtils, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return []; }, null); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(JhiDateUtils, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return []; }, null); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(JhiEventManager, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return []; }, null); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(JhiAlertService, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return [{ type: ɵngcc5.DomSanitizer }, { type: JhiConfigService }, { type: ɵngcc2.TranslateService, decorators: [{
                type: Optional
            }] }]; }, null); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(JhiBase64Service, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return []; }, null); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(JhiResolvePagingParams, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return [{ type: JhiPaginationUtil }]; }, null); })();

/*
 Copyright 2013-2020 the original author or authors from the JHipster project.

 This file is part of the JHipster project, see https://www.jhipster.tech/
 for more information.

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

 http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
 */

/*
 Copyright 2013-2020 the original author or authors from the JHipster project.

 This file is part of the JHipster project, see https://www.jhipster.tech/
 for more information.

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

 http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
 */

/**
 * Generated bundle index. Do not edit.
 */

export { JhiAlertService, JhiBase64Service, JhiBooleanComponent, JhiCapitalizePipe, JhiConfigService, JhiDataUtils, JhiDateUtils, JhiEventManager, JhiEventWithContent, JhiFilterPipe, JhiItemCountComponent, JhiKeysPipe, JhiLanguageService, JhiMaxValidatorDirective, JhiMaxbytesValidatorDirective, JhiMinValidatorDirective, JhiMinbytesValidatorDirective, JhiMissingTranslationHandler, JhiModuleConfig, JhiOrderByPipe, JhiPaginationUtil, JhiParseLinks, JhiPureFilterPipe, JhiResolvePagingParams, JhiSortByDirective, JhiSortDirective, JhiTranslateDirective, JhiTruncateCharactersPipe, JhiTruncateWordsPipe, NgJhipsterModule, missingTranslationHandler, translatePartialLoader, JHI_PIPES as ɵa, JHI_DIRECTIVES as ɵb, JHI_COMPONENTS as ɵc, JhiJvmMemoryComponent as ɵd, JhiJvmThreadsComponent as ɵe, JhiMetricsHttpRequestComponent as ɵf, JhiMetricsEndpointsRequestsComponent as ɵg, JhiMetricsCacheComponent as ɵh, JhiMetricsDatasourceComponent as ɵi, JhiMetricsSystemComponent as ɵj, JhiMetricsGarbageCollectorComponent as ɵk, JhiThreadModalComponent as ɵl };

//# sourceMappingURL=ng-jhipster.js.map