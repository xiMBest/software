import { ElementRef } from '@angular/core';
import { Observable } from 'rxjs';
import { FormGroup } from '@angular/forms';
import * as ɵngcc0 from '@angular/core';
export declare type JhiFileLoadErrorType = 'not.image' | 'could.not.extract';
export interface JhiFileLoadError {
    message: string;
    key: JhiFileLoadErrorType;
    params?: any;
}
/**
 * An utility service for data.
 */
export declare class JhiDataUtils {
    constructor();
    /**
     * Method to abbreviate the text given
     */
    abbreviate(text: string, append?: string): string;
    /**
     * Method to find the byte size of the string provides
     */
    byteSize(base64String: string): string;
    /**
     * Method to open file
     */
    openFile(contentType: string, data: string): void;
    /**
     * Method to convert the file to base64
     */
    toBase64(file: File, cb: Function): void;
    /**
     * Method to clear the input
     */
    clearInputImage(entity: any, elementRef: ElementRef, field: string, fieldContentType: string, idInput: string): void;
    /**
     * Sets the base 64 data & file type of the 1st file on the event (event.target.files[0]) in the passed entity object
     * and returns a promise.
     *
     * @param event the object containing the file (at event.target.files[0])
     * @param entity the object to set the file's 'base 64 data' and 'file type' on
     * @param field the field name to set the file's 'base 64 data' on
     * @param isImage boolean representing if the file represented by the event is an image
     * @returns a promise that resolves to the modified entity if operation is successful, otherwise rejects with an error message
     */
    setFileData(event: any, entity: any, field: string, isImage: boolean): Promise<any>;
    /**
     * Sets the base 64 data & file type of the 1st file on the event (event.target.files[0]) in the passed entity object
     * and returns an observable.
     *
     * @param event the object containing the file (at event.target.files[0])
     * @param editForm the form group where the input field is located
     * @param field the field name to set the file's 'base 64 data' on
     * @param isImage boolean representing if the file represented by the event is an image
     * @returns an observable that loads file to form field and completes if sussessful
     *          or returns error as JhiFileLoadError on failure
     */
    loadFileToForm(event: Event, editForm: FormGroup, field: string, isImage: boolean): Observable<void>;
    /**
     * Method to download file
     */
    downloadFile(contentType: string, data: string, fileName: string): void;
    private endsWith;
    private paddingSize;
    private size;
    private formatAsBytes;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<JhiDataUtils>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0YS11dGlsLnNlcnZpY2UuZC50cyIsInNvdXJjZXMiOlsiZGF0YS11dGlsLnNlcnZpY2UuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7OztBQUdBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUE4REEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBFbGVtZW50UmVmIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBGb3JtR3JvdXAgfSBmcm9tICdAYW5ndWxhci9mb3Jtcyc7XG5leHBvcnQgZGVjbGFyZSB0eXBlIEpoaUZpbGVMb2FkRXJyb3JUeXBlID0gJ25vdC5pbWFnZScgfCAnY291bGQubm90LmV4dHJhY3QnO1xuZXhwb3J0IGludGVyZmFjZSBKaGlGaWxlTG9hZEVycm9yIHtcbiAgICBtZXNzYWdlOiBzdHJpbmc7XG4gICAga2V5OiBKaGlGaWxlTG9hZEVycm9yVHlwZTtcbiAgICBwYXJhbXM/OiBhbnk7XG59XG4vKipcbiAqIEFuIHV0aWxpdHkgc2VydmljZSBmb3IgZGF0YS5cbiAqL1xuZXhwb3J0IGRlY2xhcmUgY2xhc3MgSmhpRGF0YVV0aWxzIHtcbiAgICBjb25zdHJ1Y3RvcigpO1xuICAgIC8qKlxuICAgICAqIE1ldGhvZCB0byBhYmJyZXZpYXRlIHRoZSB0ZXh0IGdpdmVuXG4gICAgICovXG4gICAgYWJicmV2aWF0ZSh0ZXh0OiBzdHJpbmcsIGFwcGVuZD86IHN0cmluZyk6IHN0cmluZztcbiAgICAvKipcbiAgICAgKiBNZXRob2QgdG8gZmluZCB0aGUgYnl0ZSBzaXplIG9mIHRoZSBzdHJpbmcgcHJvdmlkZXNcbiAgICAgKi9cbiAgICBieXRlU2l6ZShiYXNlNjRTdHJpbmc6IHN0cmluZyk6IHN0cmluZztcbiAgICAvKipcbiAgICAgKiBNZXRob2QgdG8gb3BlbiBmaWxlXG4gICAgICovXG4gICAgb3BlbkZpbGUoY29udGVudFR5cGU6IHN0cmluZywgZGF0YTogc3RyaW5nKTogdm9pZDtcbiAgICAvKipcbiAgICAgKiBNZXRob2QgdG8gY29udmVydCB0aGUgZmlsZSB0byBiYXNlNjRcbiAgICAgKi9cbiAgICB0b0Jhc2U2NChmaWxlOiBGaWxlLCBjYjogRnVuY3Rpb24pOiB2b2lkO1xuICAgIC8qKlxuICAgICAqIE1ldGhvZCB0byBjbGVhciB0aGUgaW5wdXRcbiAgICAgKi9cbiAgICBjbGVhcklucHV0SW1hZ2UoZW50aXR5OiBhbnksIGVsZW1lbnRSZWY6IEVsZW1lbnRSZWYsIGZpZWxkOiBzdHJpbmcsIGZpZWxkQ29udGVudFR5cGU6IHN0cmluZywgaWRJbnB1dDogc3RyaW5nKTogdm9pZDtcbiAgICAvKipcbiAgICAgKiBTZXRzIHRoZSBiYXNlIDY0IGRhdGEgJiBmaWxlIHR5cGUgb2YgdGhlIDFzdCBmaWxlIG9uIHRoZSBldmVudCAoZXZlbnQudGFyZ2V0LmZpbGVzWzBdKSBpbiB0aGUgcGFzc2VkIGVudGl0eSBvYmplY3RcbiAgICAgKiBhbmQgcmV0dXJucyBhIHByb21pc2UuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gZXZlbnQgdGhlIG9iamVjdCBjb250YWluaW5nIHRoZSBmaWxlIChhdCBldmVudC50YXJnZXQuZmlsZXNbMF0pXG4gICAgICogQHBhcmFtIGVudGl0eSB0aGUgb2JqZWN0IHRvIHNldCB0aGUgZmlsZSdzICdiYXNlIDY0IGRhdGEnIGFuZCAnZmlsZSB0eXBlJyBvblxuICAgICAqIEBwYXJhbSBmaWVsZCB0aGUgZmllbGQgbmFtZSB0byBzZXQgdGhlIGZpbGUncyAnYmFzZSA2NCBkYXRhJyBvblxuICAgICAqIEBwYXJhbSBpc0ltYWdlIGJvb2xlYW4gcmVwcmVzZW50aW5nIGlmIHRoZSBmaWxlIHJlcHJlc2VudGVkIGJ5IHRoZSBldmVudCBpcyBhbiBpbWFnZVxuICAgICAqIEByZXR1cm5zIGEgcHJvbWlzZSB0aGF0IHJlc29sdmVzIHRvIHRoZSBtb2RpZmllZCBlbnRpdHkgaWYgb3BlcmF0aW9uIGlzIHN1Y2Nlc3NmdWwsIG90aGVyd2lzZSByZWplY3RzIHdpdGggYW4gZXJyb3IgbWVzc2FnZVxuICAgICAqL1xuICAgIHNldEZpbGVEYXRhKGV2ZW50OiBhbnksIGVudGl0eTogYW55LCBmaWVsZDogc3RyaW5nLCBpc0ltYWdlOiBib29sZWFuKTogUHJvbWlzZTxhbnk+O1xuICAgIC8qKlxuICAgICAqIFNldHMgdGhlIGJhc2UgNjQgZGF0YSAmIGZpbGUgdHlwZSBvZiB0aGUgMXN0IGZpbGUgb24gdGhlIGV2ZW50IChldmVudC50YXJnZXQuZmlsZXNbMF0pIGluIHRoZSBwYXNzZWQgZW50aXR5IG9iamVjdFxuICAgICAqIGFuZCByZXR1cm5zIGFuIG9ic2VydmFibGUuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gZXZlbnQgdGhlIG9iamVjdCBjb250YWluaW5nIHRoZSBmaWxlIChhdCBldmVudC50YXJnZXQuZmlsZXNbMF0pXG4gICAgICogQHBhcmFtIGVkaXRGb3JtIHRoZSBmb3JtIGdyb3VwIHdoZXJlIHRoZSBpbnB1dCBmaWVsZCBpcyBsb2NhdGVkXG4gICAgICogQHBhcmFtIGZpZWxkIHRoZSBmaWVsZCBuYW1lIHRvIHNldCB0aGUgZmlsZSdzICdiYXNlIDY0IGRhdGEnIG9uXG4gICAgICogQHBhcmFtIGlzSW1hZ2UgYm9vbGVhbiByZXByZXNlbnRpbmcgaWYgdGhlIGZpbGUgcmVwcmVzZW50ZWQgYnkgdGhlIGV2ZW50IGlzIGFuIGltYWdlXG4gICAgICogQHJldHVybnMgYW4gb2JzZXJ2YWJsZSB0aGF0IGxvYWRzIGZpbGUgdG8gZm9ybSBmaWVsZCBhbmQgY29tcGxldGVzIGlmIHN1c3Nlc3NmdWxcbiAgICAgKiAgICAgICAgICBvciByZXR1cm5zIGVycm9yIGFzIEpoaUZpbGVMb2FkRXJyb3Igb24gZmFpbHVyZVxuICAgICAqL1xuICAgIGxvYWRGaWxlVG9Gb3JtKGV2ZW50OiBFdmVudCwgZWRpdEZvcm06IEZvcm1Hcm91cCwgZmllbGQ6IHN0cmluZywgaXNJbWFnZTogYm9vbGVhbik6IE9ic2VydmFibGU8dm9pZD47XG4gICAgLyoqXG4gICAgICogTWV0aG9kIHRvIGRvd25sb2FkIGZpbGVcbiAgICAgKi9cbiAgICBkb3dubG9hZEZpbGUoY29udGVudFR5cGU6IHN0cmluZywgZGF0YTogc3RyaW5nLCBmaWxlTmFtZTogc3RyaW5nKTogdm9pZDtcbiAgICBwcml2YXRlIGVuZHNXaXRoO1xuICAgIHByaXZhdGUgcGFkZGluZ1NpemU7XG4gICAgcHJpdmF0ZSBzaXplO1xuICAgIHByaXZhdGUgZm9ybWF0QXNCeXRlcztcbn1cbiJdfQ==