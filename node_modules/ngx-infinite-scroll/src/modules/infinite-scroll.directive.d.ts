import { AfterViewInit, ElementRef, EventEmitter, NgZone, OnChanges, OnDestroy, SimpleChanges } from '@angular/core';
import { IInfiniteScrollEvent, IInfiniteScrollAction } from '../models';
import * as ɵngcc0 from '@angular/core';
export declare class InfiniteScrollDirective implements OnDestroy, OnChanges, AfterViewInit {
    private element;
    private zone;
    scrolled: EventEmitter<IInfiniteScrollEvent>;
    scrolledUp: EventEmitter<IInfiniteScrollEvent>;
    infiniteScrollDistance: number;
    infiniteScrollUpDistance: number;
    infiniteScrollThrottle: number;
    infiniteScrollDisabled: boolean;
    infiniteScrollContainer: any;
    scrollWindow: boolean;
    immediateCheck: boolean;
    horizontal: boolean;
    alwaysCallback: boolean;
    fromRoot: boolean;
    private disposeScroller;
    constructor(element: ElementRef, zone: NgZone);
    ngAfterViewInit(): void;
    ngOnChanges({ infiniteScrollContainer, infiniteScrollDisabled, infiniteScrollDistance }: SimpleChanges): void;
    setup(): void;
    handleOnScroll({ type, payload }: IInfiniteScrollAction): void;
    ngOnDestroy(): void;
    destroyScroller(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<InfiniteScrollDirective>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<InfiniteScrollDirective, "[infiniteScroll], [infinite-scroll], [data-infinite-scroll]", never, {
    "infiniteScrollDistance": "infiniteScrollDistance";
    "infiniteScrollUpDistance": "infiniteScrollUpDistance";
    "infiniteScrollThrottle": "infiniteScrollThrottle";
    "infiniteScrollDisabled": "infiniteScrollDisabled";
    "infiniteScrollContainer": "infiniteScrollContainer";
    "scrollWindow": "scrollWindow";
    "immediateCheck": "immediateCheck";
    "horizontal": "horizontal";
    "alwaysCallback": "alwaysCallback";
    "fromRoot": "fromRoot";
}, {
    "scrolled": "scrolled";
    "scrolledUp": "scrolledUp";
}, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5maW5pdGUtc2Nyb2xsLmRpcmVjdGl2ZS5kLnRzIiwic291cmNlcyI6WyJpbmZpbml0ZS1zY3JvbGwuZGlyZWN0aXZlLmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7OztBQUVBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUF1QkEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBZnRlclZpZXdJbml0LCBFbGVtZW50UmVmLCBFdmVudEVtaXR0ZXIsIE5nWm9uZSwgT25DaGFuZ2VzLCBPbkRlc3Ryb3ksIFNpbXBsZUNoYW5nZXMgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IElJbmZpbml0ZVNjcm9sbEV2ZW50LCBJSW5maW5pdGVTY3JvbGxBY3Rpb24gfSBmcm9tICcuLi9tb2RlbHMnO1xuZXhwb3J0IGRlY2xhcmUgY2xhc3MgSW5maW5pdGVTY3JvbGxEaXJlY3RpdmUgaW1wbGVtZW50cyBPbkRlc3Ryb3ksIE9uQ2hhbmdlcywgQWZ0ZXJWaWV3SW5pdCB7XG4gICAgcHJpdmF0ZSBlbGVtZW50O1xuICAgIHByaXZhdGUgem9uZTtcbiAgICBzY3JvbGxlZDogRXZlbnRFbWl0dGVyPElJbmZpbml0ZVNjcm9sbEV2ZW50PjtcbiAgICBzY3JvbGxlZFVwOiBFdmVudEVtaXR0ZXI8SUluZmluaXRlU2Nyb2xsRXZlbnQ+O1xuICAgIGluZmluaXRlU2Nyb2xsRGlzdGFuY2U6IG51bWJlcjtcbiAgICBpbmZpbml0ZVNjcm9sbFVwRGlzdGFuY2U6IG51bWJlcjtcbiAgICBpbmZpbml0ZVNjcm9sbFRocm90dGxlOiBudW1iZXI7XG4gICAgaW5maW5pdGVTY3JvbGxEaXNhYmxlZDogYm9vbGVhbjtcbiAgICBpbmZpbml0ZVNjcm9sbENvbnRhaW5lcjogYW55O1xuICAgIHNjcm9sbFdpbmRvdzogYm9vbGVhbjtcbiAgICBpbW1lZGlhdGVDaGVjazogYm9vbGVhbjtcbiAgICBob3Jpem9udGFsOiBib29sZWFuO1xuICAgIGFsd2F5c0NhbGxiYWNrOiBib29sZWFuO1xuICAgIGZyb21Sb290OiBib29sZWFuO1xuICAgIHByaXZhdGUgZGlzcG9zZVNjcm9sbGVyO1xuICAgIGNvbnN0cnVjdG9yKGVsZW1lbnQ6IEVsZW1lbnRSZWYsIHpvbmU6IE5nWm9uZSk7XG4gICAgbmdBZnRlclZpZXdJbml0KCk6IHZvaWQ7XG4gICAgbmdPbkNoYW5nZXMoeyBpbmZpbml0ZVNjcm9sbENvbnRhaW5lciwgaW5maW5pdGVTY3JvbGxEaXNhYmxlZCwgaW5maW5pdGVTY3JvbGxEaXN0YW5jZSB9OiBTaW1wbGVDaGFuZ2VzKTogdm9pZDtcbiAgICBzZXR1cCgpOiB2b2lkO1xuICAgIGhhbmRsZU9uU2Nyb2xsKHsgdHlwZSwgcGF5bG9hZCB9OiBJSW5maW5pdGVTY3JvbGxBY3Rpb24pOiB2b2lkO1xuICAgIG5nT25EZXN0cm95KCk6IHZvaWQ7XG4gICAgZGVzdHJveVNjcm9sbGVyKCk6IHZvaWQ7XG59XG4iXX0=