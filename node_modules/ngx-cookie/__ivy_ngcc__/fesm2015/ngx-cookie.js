import { Inject, Injectable, InjectionToken, Injector, NgModule } from '@angular/core';
import { APP_BASE_HREF } from '@angular/common';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * @param {?} obj
 * @return {?}
 */
import * as ɵngcc0 from '@angular/core';
function isBlank(obj) {
    return obj === undefined || obj === null;
}
/**
 * @param {?} obj
 * @return {?}
 */
function isPresent(obj) {
    return obj !== undefined && obj !== null;
}
/**
 * @param {?} obj
 * @return {?}
 */
function isString(obj) {
    return typeof obj === 'string';
}
/**
 * @param {?} oldOptions
 * @param {?=} newOptions
 * @return {?}
 */
function mergeOptions(oldOptions, newOptions) {
    if (!newOptions) {
        return oldOptions;
    }
    return {
        path: isPresent(newOptions.path) ? newOptions.path : oldOptions.path,
        domain: isPresent(newOptions.domain) ? newOptions.domain : oldOptions.domain,
        expires: isPresent(newOptions.expires) ? newOptions.expires : oldOptions.expires,
        secure: isPresent(newOptions.secure) ? newOptions.secure : oldOptions.secure,
        storeUnencoded: isPresent(newOptions.storeUnencoded) ? newOptions.storeUnencoded : oldOptions.storeUnencoded,
    };
}
/**
 * @param {?} str
 * @return {?}
 */
function safeDecodeURIComponent(str) {
    try {
        return decodeURIComponent(str);
    }
    catch (/** @type {?} */ e) {
        return str;
    }
}
/**
 * @param {?} str
 * @return {?}
 */
function safeJsonParse(str) {
    try {
        return JSON.parse(str);
    }
    catch (/** @type {?} */ e) {
        return str;
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
const /** @type {?} */ COOKIE_OPTIONS = new InjectionToken('COOKIE_OPTIONS');
class CookieOptionsProvider {
    /**
     * @param {?=} options
     * @param {?=} _injector
     */
    constructor(options = {}, _injector) {
        this._injector = _injector;
        this.defaultOptions = {
            path: this._injector.get(APP_BASE_HREF, '/'),
            domain: null,
            expires: null,
            secure: false,
            httpOnly: false
        };
        this._options = mergeOptions(this.defaultOptions, options);
    }
    /**
     * @return {?}
     */
    get options() {
        return this._options;
    }
}
CookieOptionsProvider.ɵfac = function CookieOptionsProvider_Factory(t) { return new (t || CookieOptionsProvider)(ɵngcc0.ɵɵinject(COOKIE_OPTIONS), ɵngcc0.ɵɵinject(ɵngcc0.Injector)); };
CookieOptionsProvider.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: CookieOptionsProvider, factory: CookieOptionsProvider.ɵfac });
/** @nocollapse */
CookieOptionsProvider.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Inject, args: [COOKIE_OPTIONS,] },] },
    { type: Injector, },
];
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(CookieOptionsProvider, [{
        type: Injectable
    }], function () { return [{ type: undefined, decorators: [{
                type: Inject,
                args: [COOKIE_OPTIONS]
            }] }, { type: ɵngcc0.Injector }]; }, null); })();

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class CookieService {
    /**
     * @param {?} _optionsProvider
     */
    constructor(_optionsProvider) {
        this._optionsProvider = _optionsProvider;
        this.options = this._optionsProvider.options;
    }
    /**
     * @return {?}
     */
    get cookieString() {
        return document.cookie || '';
    }
    /**
     * @param {?} val
     * @return {?}
     */
    set cookieString(val) {
        document.cookie = val;
    }
    /**
     * \@name CookieService#get
     *
     * \@description
     * Returns the value of given cookie key.
     *
     * @param {?} key Id to use for lookup.
     * @return {?} Raw cookie value.
     */
    get(key) {
        return (/** @type {?} */ (this._cookieReader()))[key];
    }
    /**
     * \@name CookieService#getObject
     *
     * \@description
     * Returns the deserialized value of given cookie key.
     *
     * @param {?} key Id to use for lookup.
     * @return {?} Deserialized cookie value.
     */
    getObject(key) {
        const /** @type {?} */ value = this.get(key);
        return value ? safeJsonParse(value) : value;
    }
    /**
     * \@name CookieService#getAll
     *
     * \@description
     * Returns a key value object with all the cookies.
     *
     * @return {?} All cookies
     */
    getAll() {
        return /** @type {?} */ (this._cookieReader());
    }
    /**
     * \@name CookieService#put
     *
     * \@description
     * Sets a value for given cookie key.
     *
     * @param {?} key Id for the `value`.
     * @param {?} value Raw value to be stored.
     * @param {?=} options (Optional) Options object.
     * @return {?}
     */
    put(key, value, options) {
        this._cookieWriter()(key, value, options);
    }
    /**
     * \@name CookieService#putObject
     *
     * \@description
     * Serializes and sets a value for given cookie key.
     *
     * @param {?} key Id for the `value`.
     * @param {?} value Value to be stored.
     * @param {?=} options (Optional) Options object.
     * @return {?}
     */
    putObject(key, value, options) {
        this.put(key, JSON.stringify(value), options);
    }
    /**
     * \@name CookieService#remove
     *
     * \@description
     * Remove given cookie.
     *
     * @param {?} key Id of the key-value pair to delete.
     * @param {?=} options (Optional) Options object.
     * @return {?}
     */
    remove(key, options) {
        this._cookieWriter()(key, undefined, options);
    }
    /**
     * \@name CookieService#removeAll
     *
     * \@description
     * Remove all cookies.
     * @param {?=} options
     * @return {?}
     */
    removeAll(options) {
        const /** @type {?} */ cookies = this.getAll();
        Object.keys(cookies).forEach(key => {
            this.remove(key, options);
        });
    }
    /**
     * @return {?}
     */
    _cookieReader() {
        let /** @type {?} */ lastCookies = {};
        let /** @type {?} */ lastCookieString = '';
        let /** @type {?} */ cookieArray, /** @type {?} */ cookie, /** @type {?} */ i, /** @type {?} */ index, /** @type {?} */ name;
        const /** @type {?} */ currentCookieString = this.cookieString;
        if (currentCookieString !== lastCookieString) {
            lastCookieString = currentCookieString;
            cookieArray = lastCookieString.split('; ');
            lastCookies = {};
            for (i = 0; i < cookieArray.length; i++) {
                cookie = cookieArray[i];
                index = cookie.indexOf('=');
                if (index > 0) {
                    // ignore nameless cookies
                    name = safeDecodeURIComponent(cookie.substring(0, index));
                    // the first value that is seen for a cookie is the most
                    // specific one.  values for the same cookie name that
                    // follow are for less specific paths.
                    if (isBlank((/** @type {?} */ (lastCookies))[name])) {
                        (/** @type {?} */ (lastCookies))[name] = safeDecodeURIComponent(cookie.substring(index + 1));
                    }
                }
            }
        }
        return lastCookies;
    }
    /**
     * @return {?}
     */
    _cookieWriter() {
        const /** @type {?} */ that = this;
        return function (name, value, options) {
            that.cookieString = that._buildCookieString(name, value, options);
        };
    }
    /**
     * @param {?} name
     * @param {?} value
     * @param {?=} options
     * @return {?}
     */
    _buildCookieString(name, value, options) {
        const /** @type {?} */ opts = mergeOptions(this.options, options);
        let /** @type {?} */ expires = opts.expires;
        if (isBlank(value)) {
            expires = 'Thu, 01 Jan 1970 00:00:00 GMT';
            value = '';
        }
        if (isString(expires)) {
            expires = new Date(expires);
        }
        const /** @type {?} */ cookieValue = opts.storeUnencoded ? value : encodeURIComponent(value);
        let /** @type {?} */ str = encodeURIComponent(name) + '=' + cookieValue;
        str += opts.path ? ';path=' + opts.path : '';
        str += opts.domain ? ';domain=' + opts.domain : '';
        str += expires ? ';expires=' + expires.toUTCString() : '';
        str += opts.secure ? ';secure' : '';
        str += opts.httpOnly ? '; HttpOnly' : '';
        // per http://www.ietf.org/rfc/rfc2109.txt browser must allow at minimum:
        // - 300 cookies
        // - 20 cookies per unique domain
        // - 4096 bytes per cookie
        const /** @type {?} */ cookieLength = str.length + 1;
        if (cookieLength > 4096) {
            console.log(`Cookie \'${name}\' possibly not set or overflowed because it was too large (${cookieLength} > 4096 bytes)!`);
        }
        return str;
    }
}
CookieService.ɵfac = function CookieService_Factory(t) { return new (t || CookieService)(ɵngcc0.ɵɵinject(CookieOptionsProvider)); };
CookieService.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: CookieService, factory: CookieService.ɵfac });
/** @nocollapse */
CookieService.ctorParameters = () => [
    { type: CookieOptionsProvider, },
];
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(CookieService, [{
        type: Injectable
    }], function () { return [{ type: CookieOptionsProvider }]; }, null); })();

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class CookieBackendService extends CookieService {
    /**
     * @param {?} request
     * @param {?} response
     * @param {?} _optionsProvider
     */
    constructor(request, response, _optionsProvider) {
        super(_optionsProvider);
        this.request = request;
        this.response = response;
    }
    /**
     * @return {?}
     */
    get cookieString() {
        return this.request.headers.cookie || '';
    }
    /**
     * @param {?} val
     * @return {?}
     */
    set cookieString(val) {
        this.request.headers.cookie = val;
        this.response.headers.cookie = val;
    }
}
CookieBackendService.ɵfac = function CookieBackendService_Factory(t) { return new (t || CookieBackendService)(ɵngcc0.ɵɵinject('REQUEST'), ɵngcc0.ɵɵinject('RESPONSE'), ɵngcc0.ɵɵinject(CookieOptionsProvider)); };
CookieBackendService.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: CookieBackendService, factory: CookieBackendService.ɵfac });
/** @nocollapse */
CookieBackendService.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Inject, args: ['REQUEST',] },] },
    { type: undefined, decorators: [{ type: Inject, args: ['RESPONSE',] },] },
    { type: CookieOptionsProvider, },
];
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(CookieBackendService, [{
        type: Injectable
    }], function () { return [{ type: undefined, decorators: [{
                type: Inject,
                args: ['REQUEST']
            }] }, { type: undefined, decorators: [{
                type: Inject,
                args: ['RESPONSE']
            }] }, { type: CookieOptionsProvider }]; }, null); })();

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * @param {?} cookieOptionsProvider
 * @return {?}
 */
function cookieServiceFactory(cookieOptionsProvider) {
    return new CookieService(cookieOptionsProvider);
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class CookieModule {
    /**
     * Use this method in your root module to provide the CookieService
     * @param {?=} options
     * @return {?}
     */
    static forRoot(options = {}) {
        return {
            ngModule: CookieModule,
            providers: [
                { provide: COOKIE_OPTIONS, useValue: options },
                { provide: CookieService, useFactory: cookieServiceFactory, deps: [CookieOptionsProvider] }
            ]
        };
    }
    /**
     * Use this method in your other (non root) modules to import the directive/pipe
     * @param {?=} options
     * @return {?}
     */
    static forChild(options = {}) {
        return {
            ngModule: CookieModule,
            providers: [
                { provide: COOKIE_OPTIONS, useValue: options },
                { provide: CookieService, useFactory: cookieServiceFactory, deps: [CookieOptionsProvider] }
            ]
        };
    }
}
CookieModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: CookieModule });
CookieModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function CookieModule_Factory(t) { return new (t || CookieModule)(); }, providers: [CookieOptionsProvider] });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(CookieModule, [{
        type: NgModule,
        args: [{
                providers: [CookieOptionsProvider]
            }]
    }], null, null); })();

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

export { CookieService, CookieBackendService, COOKIE_OPTIONS, CookieOptionsProvider, cookieServiceFactory, isBlank, isPresent, isString, mergeOptions, safeDecodeURIComponent, safeJsonParse, CookieModule };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,