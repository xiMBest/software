import { CookieOptionsProvider } from './cookie-options-provider';
import { CookieOptions } from './cookie-options.model';
import * as ɵngcc0 from '@angular/core';
export interface ICookieService {
    get(key: string): string;
    getObject(key: string): Object;
    getAll(): Object;
    put(key: string, value: string, options?: CookieOptions): void;
    putObject(key: string, value: Object, options?: CookieOptions): void;
    remove(key: string, options?: CookieOptions): void;
    removeAll(options?: CookieOptions): void;
}
export declare class CookieService implements ICookieService {
    private _optionsProvider;
    protected options: CookieOptions;
    protected cookieString: string;
    constructor(_optionsProvider: CookieOptionsProvider);
    /**
     * @name CookieService#get
     *
     * @description
     * Returns the value of given cookie key.
     *
     * @param key Id to use for lookup.
     * @returns Raw cookie value.
     */
    get(key: string): string;
    /**
     * @name CookieService#getObject
     *
     * @description
     * Returns the deserialized value of given cookie key.
     *
     * @param key Id to use for lookup.
     * @returns Deserialized cookie value.
     */
    getObject(key: string): Object;
    /**
     * @name CookieService#getAll
     *
     * @description
     * Returns a key value object with all the cookies.
     *
     * @returns All cookies
     */
    getAll(): Object;
    /**
     * @name CookieService#put
     *
     * @description
     * Sets a value for given cookie key.
     *
     * @param key Id for the `value`.
     * @param value Raw value to be stored.
     * @param options (Optional) Options object.
     */
    put(key: string, value: string, options?: CookieOptions): void;
    /**
     * @name CookieService#putObject
     *
     * @description
     * Serializes and sets a value for given cookie key.
     *
     * @param key Id for the `value`.
     * @param value Value to be stored.
     * @param options (Optional) Options object.
     */
    putObject(key: string, value: Object, options?: CookieOptions): void;
    /**
     * @name CookieService#remove
     *
     * @description
     * Remove given cookie.
     *
     * @param key Id of the key-value pair to delete.
     * @param options (Optional) Options object.
     */
    remove(key: string, options?: CookieOptions): void;
    /**
     * @name CookieService#removeAll
     *
     * @description
     * Remove all cookies.
     */
    removeAll(options?: CookieOptions): void;
    private _cookieReader();
    private _cookieWriter();
    private _buildCookieString(name, value, options?);
    static ɵfac: ɵngcc0.ɵɵFactoryDef<CookieService>;
    static ɵprov: ɵngcc0.ɵɵInjectableDef<CookieService>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29va2llLnNlcnZpY2UuZC50cyIsInNvdXJjZXMiOlsiY29va2llLnNlcnZpY2UuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7O0FBRUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQXFGQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvb2tpZU9wdGlvbnNQcm92aWRlciB9IGZyb20gJy4vY29va2llLW9wdGlvbnMtcHJvdmlkZXInO1xuaW1wb3J0IHsgQ29va2llT3B0aW9ucyB9IGZyb20gJy4vY29va2llLW9wdGlvbnMubW9kZWwnO1xuZXhwb3J0IGludGVyZmFjZSBJQ29va2llU2VydmljZSB7XG4gICAgZ2V0KGtleTogc3RyaW5nKTogc3RyaW5nO1xuICAgIGdldE9iamVjdChrZXk6IHN0cmluZyk6IE9iamVjdDtcbiAgICBnZXRBbGwoKTogT2JqZWN0O1xuICAgIHB1dChrZXk6IHN0cmluZywgdmFsdWU6IHN0cmluZywgb3B0aW9ucz86IENvb2tpZU9wdGlvbnMpOiB2b2lkO1xuICAgIHB1dE9iamVjdChrZXk6IHN0cmluZywgdmFsdWU6IE9iamVjdCwgb3B0aW9ucz86IENvb2tpZU9wdGlvbnMpOiB2b2lkO1xuICAgIHJlbW92ZShrZXk6IHN0cmluZywgb3B0aW9ucz86IENvb2tpZU9wdGlvbnMpOiB2b2lkO1xuICAgIHJlbW92ZUFsbChvcHRpb25zPzogQ29va2llT3B0aW9ucyk6IHZvaWQ7XG59XG5leHBvcnQgZGVjbGFyZSBjbGFzcyBDb29raWVTZXJ2aWNlIGltcGxlbWVudHMgSUNvb2tpZVNlcnZpY2Uge1xuICAgIHByaXZhdGUgX29wdGlvbnNQcm92aWRlcjtcbiAgICBwcm90ZWN0ZWQgb3B0aW9uczogQ29va2llT3B0aW9ucztcbiAgICBwcm90ZWN0ZWQgY29va2llU3RyaW5nOiBzdHJpbmc7XG4gICAgY29uc3RydWN0b3IoX29wdGlvbnNQcm92aWRlcjogQ29va2llT3B0aW9uc1Byb3ZpZGVyKTtcbiAgICAvKipcbiAgICAgKiBAbmFtZSBDb29raWVTZXJ2aWNlI2dldFxuICAgICAqXG4gICAgICogQGRlc2NyaXB0aW9uXG4gICAgICogUmV0dXJucyB0aGUgdmFsdWUgb2YgZ2l2ZW4gY29va2llIGtleS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBrZXkgSWQgdG8gdXNlIGZvciBsb29rdXAuXG4gICAgICogQHJldHVybnMgUmF3IGNvb2tpZSB2YWx1ZS5cbiAgICAgKi9cbiAgICBnZXQoa2V5OiBzdHJpbmcpOiBzdHJpbmc7XG4gICAgLyoqXG4gICAgICogQG5hbWUgQ29va2llU2VydmljZSNnZXRPYmplY3RcbiAgICAgKlxuICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAqIFJldHVybnMgdGhlIGRlc2VyaWFsaXplZCB2YWx1ZSBvZiBnaXZlbiBjb29raWUga2V5LlxuICAgICAqXG4gICAgICogQHBhcmFtIGtleSBJZCB0byB1c2UgZm9yIGxvb2t1cC5cbiAgICAgKiBAcmV0dXJucyBEZXNlcmlhbGl6ZWQgY29va2llIHZhbHVlLlxuICAgICAqL1xuICAgIGdldE9iamVjdChrZXk6IHN0cmluZyk6IE9iamVjdDtcbiAgICAvKipcbiAgICAgKiBAbmFtZSBDb29raWVTZXJ2aWNlI2dldEFsbFxuICAgICAqXG4gICAgICogQGRlc2NyaXB0aW9uXG4gICAgICogUmV0dXJucyBhIGtleSB2YWx1ZSBvYmplY3Qgd2l0aCBhbGwgdGhlIGNvb2tpZXMuXG4gICAgICpcbiAgICAgKiBAcmV0dXJucyBBbGwgY29va2llc1xuICAgICAqL1xuICAgIGdldEFsbCgpOiBPYmplY3Q7XG4gICAgLyoqXG4gICAgICogQG5hbWUgQ29va2llU2VydmljZSNwdXRcbiAgICAgKlxuICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAqIFNldHMgYSB2YWx1ZSBmb3IgZ2l2ZW4gY29va2llIGtleS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBrZXkgSWQgZm9yIHRoZSBgdmFsdWVgLlxuICAgICAqIEBwYXJhbSB2YWx1ZSBSYXcgdmFsdWUgdG8gYmUgc3RvcmVkLlxuICAgICAqIEBwYXJhbSBvcHRpb25zIChPcHRpb25hbCkgT3B0aW9ucyBvYmplY3QuXG4gICAgICovXG4gICAgcHV0KGtleTogc3RyaW5nLCB2YWx1ZTogc3RyaW5nLCBvcHRpb25zPzogQ29va2llT3B0aW9ucyk6IHZvaWQ7XG4gICAgLyoqXG4gICAgICogQG5hbWUgQ29va2llU2VydmljZSNwdXRPYmplY3RcbiAgICAgKlxuICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAqIFNlcmlhbGl6ZXMgYW5kIHNldHMgYSB2YWx1ZSBmb3IgZ2l2ZW4gY29va2llIGtleS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBrZXkgSWQgZm9yIHRoZSBgdmFsdWVgLlxuICAgICAqIEBwYXJhbSB2YWx1ZSBWYWx1ZSB0byBiZSBzdG9yZWQuXG4gICAgICogQHBhcmFtIG9wdGlvbnMgKE9wdGlvbmFsKSBPcHRpb25zIG9iamVjdC5cbiAgICAgKi9cbiAgICBwdXRPYmplY3Qoa2V5OiBzdHJpbmcsIHZhbHVlOiBPYmplY3QsIG9wdGlvbnM/OiBDb29raWVPcHRpb25zKTogdm9pZDtcbiAgICAvKipcbiAgICAgKiBAbmFtZSBDb29raWVTZXJ2aWNlI3JlbW92ZVxuICAgICAqXG4gICAgICogQGRlc2NyaXB0aW9uXG4gICAgICogUmVtb3ZlIGdpdmVuIGNvb2tpZS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBrZXkgSWQgb2YgdGhlIGtleS12YWx1ZSBwYWlyIHRvIGRlbGV0ZS5cbiAgICAgKiBAcGFyYW0gb3B0aW9ucyAoT3B0aW9uYWwpIE9wdGlvbnMgb2JqZWN0LlxuICAgICAqL1xuICAgIHJlbW92ZShrZXk6IHN0cmluZywgb3B0aW9ucz86IENvb2tpZU9wdGlvbnMpOiB2b2lkO1xuICAgIC8qKlxuICAgICAqIEBuYW1lIENvb2tpZVNlcnZpY2UjcmVtb3ZlQWxsXG4gICAgICpcbiAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgKiBSZW1vdmUgYWxsIGNvb2tpZXMuXG4gICAgICovXG4gICAgcmVtb3ZlQWxsKG9wdGlvbnM/OiBDb29raWVPcHRpb25zKTogdm9pZDtcbiAgICBwcml2YXRlIF9jb29raWVSZWFkZXIoKTtcbiAgICBwcml2YXRlIF9jb29raWVXcml0ZXIoKTtcbiAgICBwcml2YXRlIF9idWlsZENvb2tpZVN0cmluZyhuYW1lLCB2YWx1ZSwgb3B0aW9ucz8pO1xufVxuIl19